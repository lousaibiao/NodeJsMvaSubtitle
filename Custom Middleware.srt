1 
00:00:00.450 --> 00:00:01.790
Hi, I'm Scott Hanselman.

2 
00:00:01.791 --> 00:00:03.010
And I'm Jeff Fritz.

3 
00:00:03.011 --> 00:00:06.209
And this isIntermediate ASP.NET Core 1.0.

4 
00:00:06.210 --> 00:00:09.540
If you made it here somehowto the middle of our day.

5 
00:00:09.541 --> 00:00:11.510
And you don't know how you got here.

6 
00:00:11.511 --> 00:00:14.370
You might take a look atthe beginner ASP.NET Core that

7 
00:00:14.371 --> 00:00:15.310
we did before.

8 
00:00:15.311 --> 00:00:17.080
It's a whole day ofgreat beginner content.

9 
00:00:17.081 --> 00:00:17.840
Yep.

10 
00:00:17.841 --> 00:00:20.930
So what we're gonna be talkingabout right now is this idea of

11 
00:00:20.931 --> 00:00:22.270
middleware.

12 
00:00:22.271 --> 00:00:25.810
Yeah, it feels like a loaded term,middleware.

13 
00:00:25.811 --> 00:00:28.680
It's software that's inthe middle of something.

14 
00:00:28.681 --> 00:00:29.240
It is.And

15 
00:00:29.241 --> 00:00:33.580
it's not really clear where it fits,how it works and

16 
00:00:33.581 --> 00:00:36.820
what it means to people who arewriting ASP.NET code that maybe in

17 
00:00:36.821 --> 00:00:41.890
the past had written handlers ormodules, right?

18 
00:00:41.891 --> 00:00:42.940
It's a different concept.

19 
00:00:42.941 --> 00:00:43.500
Right.

20 
00:00:43.501 --> 00:00:48.060
In the old days,last week before the new stuff.

21 
00:00:48.061 --> 00:00:51.750
There was this concept of the HTTPhandler and the HTTP module.

22 
00:00:51.751 --> 00:00:54.787
Handlers of course were an endpoint,and

23 
00:00:54.788 --> 00:00:58.750
modules were the I'mlistening at all times.

24 
00:00:58.751 --> 00:01:01.870
Yeah, right, and there wasthis concept of events, right?

25 
00:01:01.871 --> 00:01:04.120
And everything was event driven and

26 
00:01:04.121 --> 00:01:06.600
that you had all these modulesthat were out there and

27 
00:01:06.601 --> 00:01:13.000
when an event fired whether it wasa net, load, pre-render, unload,

28 
00:01:13.001 --> 00:01:16.440
it would trigger all of the modulesthat were listening for that event.

29 
00:01:16.441 --> 00:01:19.610
So you could have all thesethings happen at the same time.

30 
00:01:19.611 --> 00:01:20.990
We're now middleware, well,

31 
00:01:20.991 --> 00:01:25.890
it's more of a pipeline than thisabstract event listening thing.

32 
00:01:25.891 --> 00:01:29.400
Exactly, before you would havesomething like begin request and

33 
00:01:29.401 --> 00:01:31.540
then we'd all listeninto the begin request.

34 
00:01:31.541 --> 00:01:35.470
And everyone would get anopportunity to mess up the system.

35 
00:01:35.471 --> 00:01:36.960
But with middleware,it is a pipeline.

36 
00:01:36.961 --> 00:01:39.930
If you take a look at thisdiagram on my screen right here.

37 
00:01:39.931 --> 00:01:43.160
This is from the documentationat docs.asp.net.

38 
00:01:43.161 --> 00:01:46.730
This is a really great diagram thatgives you this idea that it is,

39 
00:01:46.731 --> 00:01:51.258
it's a pipeline but it's also kindof a chain, and order matters.

40 
00:01:51.259 --> 00:01:53.510
If you learn one thingabout middleware, and

41 
00:01:53.511 --> 00:01:56.380
we'll hear about it when youshowed me some custom middleware,

42 
00:01:56.381 --> 00:01:59.820
that the order of thatmiddleware matters so much.

43 
00:01:59.821 --> 00:02:01.560
You have some logic and

44 
00:02:01.561 --> 00:02:05.570
then you have a chain to the nextmiddleware and you say next.

45 
00:02:05.571 --> 00:02:08.097
And you pass your controlto the next middleware,

46 
00:02:08.098 --> 00:02:10.662
and it goes all the way tothe end until it terminates.

47 
00:02:10.663 --> 00:02:13.920
And then it rolls all the way back,all right?

48 
00:02:13.921 --> 00:02:16.950
So we've got my sillylittle application here.

49 
00:02:16.951 --> 00:02:18.820
This was the one that we did.

50 
00:02:18.821 --> 00:02:22.945
In the beginner asp.net core we werejust talking about the basics of

51 
00:02:22.946 --> 00:02:24.320
MVC.

52 
00:02:24.321 --> 00:02:27.565
All this application doesis basically nothing.

53 
00:02:27.566 --> 00:02:34.120
[LAUGH] It has a silly little model,and it returns it to the view.

54 
00:02:34.121 --> 00:02:36.520
So it's a little bitmore than hello world.

55 
00:02:36.521 --> 00:02:40.810
If we look at start up, it has,

56 
00:02:40.811 --> 00:02:44.970
the configure in our startuphas basically the MVC services.

57 
00:02:46.040 --> 00:02:49.730
We've got our hosting environmentand our logging, so there's logging.

58 
00:02:49.731 --> 00:02:52.550
We've got an environment check fordevelopment.

59 
00:02:53.590 --> 00:02:56.540
And then we sayUseDeveloperExceptionPage.

60 
00:02:56.541 --> 00:02:59.330
Now there were two differentconfigure methods there.

61 
00:02:59.331 --> 00:03:02.190
We should touch on what thosetwo different methods do.

62 
00:03:02.191 --> 00:03:04.560
Because they do twodifferent things.

63 
00:03:04.561 --> 00:03:08.000
Right, ConfigureServices isconfiguring dependency injection.

64 
00:03:08.001 --> 00:03:10.690
We'll talk a little bitmore about that later on

65 
00:03:10.691 --> 00:03:13.120
in the intermediate date here.

66 
00:03:13.121 --> 00:03:15.560
But this configure methodthat starts on line 36,

67 
00:03:15.561 --> 00:03:19.630
this is where we're laying outour middleware pipeline, right.

68 
00:03:19.631 --> 00:03:22.280
Right, it's almost sketching ordrawing the pipeline and

69 
00:03:22.281 --> 00:03:23.820
it's setting the tone forthe rest of it.

70 
00:03:23.821 --> 00:03:27.240
It's saying it looks like this,it is in this order.

71 
00:03:27.241 --> 00:03:31.570
And if you saw in our discussionof authentication and

72 
00:03:31.571 --> 00:03:35.580
authorization, we had identityappearing within there.

73 
00:03:35.581 --> 00:03:38.680
And it appearedbefore UseMvc because

74 
00:03:38.681 --> 00:03:40.550
it was something that wouldhappen ahead of time.

75 
00:03:40.551 --> 00:03:45.040
And we had to configure Facebook asa provider after identity was added.

76 
00:03:45.041 --> 00:03:50.010
Mm-hm, so what happens if we go anddo something silly here?

77 
00:03:50.011 --> 00:03:51.494
I'm just gonna say app.Run.

78 
00:03:51.495 --> 00:03:54.783
Remember that app.Run() iskind of the terminating bit of

79 
00:03:54.784 --> 00:03:55.885
middleware there.

80 
00:03:55.886 --> 00:04:00.600
It's gonna say I'm gonna do all ofthat work and I'm gonna take over.

81 
00:04:00.601 --> 00:04:03.466
Let's say context, and

82 
00:04:03.467 --> 00:04:09.481
I'm gonna say throw_new,I'm gonna cheat here.

83 
00:04:09.482 --> 00:04:13.480
We're gonna force an error, okay?

84 
00:04:14.520 --> 00:04:16.390
Invalid operation exception.

85 
00:04:23.306 --> 00:04:24.389
Okay?

86 
00:04:24.390 --> 00:04:28.739
So there's a little bit of and

87 
00:04:28.740 --> 00:04:33.094
we go and we go.

88 
00:04:33.095 --> 00:04:36.554
Sometimes these things can geta little bit confusing and

89 
00:04:36.555 --> 00:04:40.290
I'll find myself adding asmany of these as possible.

90 
00:04:40.291 --> 00:04:41.420
I actually forgot one there.

91 
00:04:41.421 --> 00:04:45.590
Yeah, there you go.

92 
00:04:45.591 --> 00:04:48.910
See, I just go like this andjust- Eventually it works out.

93 
00:04:48.911 --> 00:04:50.090
Eventually it'll work. Yeah.

94 
00:04:50.091 --> 00:04:51.080
Exactly, but

95 
00:04:51.081 --> 00:04:52.220
actually that's a good point.

96 
00:04:52.221 --> 00:04:53.410
It can be a little bit confusing.

97 
00:04:53.411 --> 00:04:54.430
Let's talk about that.

98 
00:04:54.431 --> 00:05:01.430
Notice how when I move my mouseover these braces or parentheses.

99 
00:05:01.431 --> 00:05:05.600
It's lighting up the pair, so,right, if I click here you can see.

100 
00:05:05.601 --> 00:05:07.971
It's showing you where it began, andit's showing you the closing one,

101 
00:05:07.972 --> 00:05:08.900
the matching pair. Exactly.

102 
00:05:08.901 --> 00:05:11.048
So, there's open, there's there and

103 
00:05:11.049 --> 00:05:14.397
then this extra stuff here,I don't know what I was thinking,

104 
00:05:14.398 --> 00:05:16.210
not really what we needed.

105 
00:05:16.211 --> 00:05:19.150
Not needed but no foul, no harm.

106 
00:05:19.151 --> 00:05:22.470
No foul, exactly, sohere we're gonna throw an exception.

107 
00:05:22.471 --> 00:05:25.540
Is this ever gonna getthe opportunity to happen?

108 
00:05:25.541 --> 00:05:28.500
No, because that app runit is as you said it is

109 
00:05:28.501 --> 00:05:29.960
a terminating piece of middle ware.

110 
00:05:29.961 --> 00:05:32.630
It is not passingcontrol on to the next.

111 
00:05:32.631 --> 00:05:36.490
From our diagram there isa next call that happens,

112 
00:05:36.491 --> 00:05:41.950
we are not calling next herewithin that, within your app run.

113 
00:05:41.951 --> 00:05:42.994
So it's gonna stop,

114 
00:05:42.995 --> 00:05:45.790
after it's done running thispiece of code on line 49.

115 
00:05:45.791 --> 00:05:50.440
All right, and in fact,let me remove that and

116 
00:05:50.441 --> 00:05:55.060
run our app and just see whatit does kind of by default here.

117 
00:05:55.061 --> 00:05:59.950
Oops, it's saying that the app isbeing used by another process.

118 
00:05:59.951 --> 00:06:03.510
That is because I amnot running under IIS.

119 
00:06:03.511 --> 00:06:07.990
I'm running under Kestrel,remember we switch those ways here,

120 
00:06:07.991 --> 00:06:10.260
we talked about thaton beginner day.

121 
00:06:10.261 --> 00:06:14.354
So I'm gonna just shut that down andrun it again.

122 
00:06:20.152 --> 00:06:23.000
Look at that, nothing. Nothing.

123 
00:06:23.001 --> 00:06:23.880
Nothing.

124 
00:06:23.881 --> 00:06:26.390
Not even informationabout that error?

125 
00:06:26.391 --> 00:06:28.810
Not even informationabout that error.

126 
00:06:28.811 --> 00:06:31.760
If we look over here In our log.

127 
00:06:31.761 --> 00:06:32.480
Yeah, in our logs.

128 
00:06:32.481 --> 00:06:33.910
I see a big red fail there.

129 
00:06:33.911 --> 00:06:34.900
Right.

130 
00:06:34.901 --> 00:06:36.080
There's our exception.

131 
00:06:37.300 --> 00:06:40.100
But, so I'm getting information,I'm finding out what's going on.

132 
00:06:40.101 --> 00:06:42.860
I got my info, I got my fail,I got my call stack,

133 
00:06:42.861 --> 00:06:47.030
including the line number cuzI'm doing a debug here, but

134 
00:06:47.031 --> 00:06:51.350
I didn't get anything friendlyfrom a web perspective.

135 
00:06:51.351 --> 00:06:55.540
And let's even look andsee what happened, what do I get?

136 
00:06:55.541 --> 00:07:00.490
I'm getting, look,I'm getting a 500 error, right?

137 
00:07:00.491 --> 00:07:02.980
400 is your fault, 500 is my fault.

138 
00:07:02.981 --> 00:07:06.826
So, remember what you would see inASP.NET in the past when you did

139 
00:07:06.827 --> 00:07:10.990
that, right, you would get-The yellow screen of doom.

140 
00:07:10.991 --> 00:07:11.600
Right, or

141 
00:07:11.601 --> 00:07:14.300
the yellow screen of death,the yellow screen of doom, exactly.

142 
00:07:14.301 --> 00:07:17.870
You get that big yellowscreen with ASP.NET Core.

143 
00:07:17.871 --> 00:07:22.250
It's important to remember thatnothing's included by default,

144 
00:07:22.251 --> 00:07:25.260
you have to ask forit if you want it.

145 
00:07:25.261 --> 00:07:29.680
So we want to bring that back,that thing that I removed.

146 
00:07:29.681 --> 00:07:31.260
If we're in the developmentenvironment,

147 
00:07:32.590 --> 00:07:34.620
use the developer exception page.

148 
00:07:34.621 --> 00:07:38.150
So that's effectively usethe yellow screen of death

149 
00:07:39.280 --> 00:07:42.450
Is what that's saying That'sa piece of middleware.

150 
00:07:42.451 --> 00:07:44.830
We can actually zoom in on that,see.

151 
00:07:44.831 --> 00:07:46.740
Captures exceptions instances.

152 
00:07:46.741 --> 00:07:50.510
That is what that for and thengenerates an html error response.

153 
00:07:51.630 --> 00:07:54.100
Now, it is somethingyou had to opt into.

154 
00:07:54.101 --> 00:07:58.260
But there may be some environmentswhere they don't want this running.

155 
00:07:58.261 --> 00:07:59.330
And that's why we're saying,

156 
00:07:59.331 --> 00:08:02.980
is development,is this the development environment.

157 
00:08:02.981 --> 00:08:06.081
By default we're not includingthis capability when you get to

158 
00:08:06.082 --> 00:08:06.790
production.

159 
00:08:06.791 --> 00:08:09.000
Right, a production errormessage could still happen.

160 
00:08:09.001 --> 00:08:11.990
But it should not probablyinclude my source code. No.

161 
00:08:11.991 --> 00:08:12.460
Right.

162 
00:08:12.461 --> 00:08:14.250
No, no.Where is this coming from?

163 
00:08:14.251 --> 00:08:18.380
That lives inside ofAspNetCore.Diagnostics.

164 
00:08:18.381 --> 00:08:22.320
So it's that diagnostics packagethat is making that possible.

165 
00:08:22.321 --> 00:08:23.070
Makes sense.

166 
00:08:23.071 --> 00:08:25.004
Okay, so let's run it again now.

167 
00:08:27.013 --> 00:08:30.488
Except we're gonna includeUseDeveloperExceptionPage.

168 
00:08:33.333 --> 00:08:35.410
Notice that the loggingstill happens.

169 
00:08:35.411 --> 00:08:37.810
Yeah, we still see those fail logs.

170 
00:08:37.811 --> 00:08:38.690
And that's totally fine.

171 
00:08:38.691 --> 00:08:41.496
And that will eithergo into the console or

172 
00:08:41.497 --> 00:08:44.355
Visual Studio's output window. Sure.

173 
00:08:44.356 --> 00:08:47.160
Mm-hm, or in the case of Azure,

174 
00:08:47.161 --> 00:08:50.030
it'll go into Storage or whereverwe've decided to put our tracing.

175 
00:08:50.031 --> 00:08:52.480
However you configureyour logging provider.

176 
00:08:52.481 --> 00:08:53.140
Mm-hm, so

177 
00:08:53.141 --> 00:08:57.570
this as we said before is thepeaceful light blue screen of death.

178 
00:08:57.571 --> 00:08:59.540
Yeah, it's kind of nice though.

179 
00:08:59.541 --> 00:09:02.390
You can see the raw details.

180 
00:09:02.391 --> 00:09:03.160
You can see a rendering of it.

181 
00:09:04.720 --> 00:09:07.770
Yeah that block at the bottomlooks more like what I expect

182 
00:09:07.771 --> 00:09:09.440
out of Visual Studiowhen I get a stack tray.

183 
00:09:09.441 --> 00:09:11.280
Yeah it's interestingthat you say that,

184 
00:09:11.281 --> 00:09:14.430
because that kind of unfriendlything is what you would expect, but

185 
00:09:14.431 --> 00:09:18.590
in fact look at this You're gettingthe exact line of code, you can

186 
00:09:18.591 --> 00:09:23.910
see the Queries and the Cookies,see the culture, I can see Headers.

187 
00:09:23.911 --> 00:09:27.730
So, you're getting a nice experiencehere but here's the important part.

188 
00:09:27.731 --> 00:09:30.000
Maybe this isn't whatyour company wants,

189 
00:09:30.001 --> 00:09:33.110
maybe you want yourown screen of death.

190 
00:09:33.111 --> 00:09:36.120
Let say that you’re doingproducts and shopping carts.

191 
00:09:36.121 --> 00:09:40.700
Maybe shopping cart information'simportant to your exception page.

192 
00:09:40.701 --> 00:09:43.530
Why not add shopping carts?

193 
00:09:43.531 --> 00:09:47.410
Or Identity, or OAuth, orwhatever makes you happy?

194 
00:09:47.411 --> 00:09:50.020
Before, do you know wherethe L-screen of death lived,

195 
00:09:50.021 --> 00:09:51.430
like on disk, where was it?

196 
00:09:51.431 --> 00:09:52.683
I couldn't even point to it.

197 
00:09:52.684 --> 00:09:53.693
>> Gosh.

198 
00:09:53.694 --> 00:09:54.808
>> It was in the beast.

199 
00:09:54.809 --> 00:09:59.677
It was hiding in a .dll somewhere,compiled and strong-named and,

200 
00:09:59.678 --> 00:10:03.817
Hidden in the beast,the GAC somewhere under C:Windows.

201 
00:10:03.818 --> 00:10:06.977
>> Exactly, somewhere in the GlobalAssembly Cache there was a yellow

202 
00:10:06.978 --> 00:10:09.092
screen of death thatyou could never change.

203 
00:10:09.093 --> 00:10:12.006
Additionally, lots of peoplewent to production, and

204 
00:10:12.007 --> 00:10:15.106
we've all had that experience,where we go to a webpage and

205 
00:10:15.107 --> 00:10:17.653
then you like,wow I'm looking at source code.

206 
00:10:17.654 --> 00:10:21.843
And you get that kind of like,nobody's supposed to be here,

207 
00:10:21.844 --> 00:10:22.910
this not okay.

208 
00:10:22.911 --> 00:10:24.320
>> Yeah, this feels dirty.

209 
00:10:24.321 --> 00:10:24.880
>> Right, so

210 
00:10:24.881 --> 00:10:30.370
the problem here is that we shippedthat with the wrong defaults.

211 
00:10:30.371 --> 00:10:31.310
So in this case,

212 
00:10:31.311 --> 00:10:34.620
you don't get an exceptionpage unless you asked for it.

213 
00:10:34.621 --> 00:10:38.890
And if you specifiedthe appropriate environment.

214 
00:10:38.891 --> 00:10:42.580
So then the question is, what wouldthis look like for production.

215 
00:10:43.780 --> 00:10:44.900
What do we wanna do?

216 
00:10:44.901 --> 00:10:49.916
So let's say,if it's development, do this.

217 
00:10:49.917 --> 00:10:53.240
Else it's anything but development.

218 
00:10:54.400 --> 00:10:58.920
So then we can write a littlepiece of middleware here.

219 
00:10:58.921 --> 00:11:00.260
And if I understand correctly,

220 
00:11:00.261 --> 00:11:03.780
we don't need to write middlewarenecessarily, with its own class.

221 
00:11:03.781 --> 00:11:06.930
>> No, you can use an anonymousobject there in the middle.

222 
00:11:06.931 --> 00:11:12.440
>> Sowe'll say app.UseExceptionHandler,

223 
00:11:12.441 --> 00:11:17.050
adds a middleware to the pipelineto catch exceptions, logs them.

224 
00:11:17.051 --> 00:11:20.682
And then re-execute the request,in an alternate pipeline.

225 
00:11:20.683 --> 00:11:22.480
>> Okay.

226 
00:11:22.481 --> 00:11:25.770
>> So we're gonna say,ExceptionHandler and then we're not

227 
00:11:25.771 --> 00:11:31.540
gonna use app,we're gonna use, subApp.

228 
00:11:31.541 --> 00:11:33.600
So this is an alternate pipeline,

229 
00:11:33.601 --> 00:11:37.549
because the one that's brokenis ruined for us at this point.

230 
00:11:38.630 --> 00:11:42.299
So, we're gonna go here andwe're gonna say subApp.Run.

231 
00:11:44.546 --> 00:11:46.210
And try to do some stuff.

232 
00:11:48.670 --> 00:11:50.400
>> You've got a minus there.

233 
00:11:50.401 --> 00:11:51.800
>> You think that's a problem?

234 
00:11:51.801 --> 00:11:52.400
>> That's a start.

235 
00:11:52.401 --> 00:11:53.914
>> You think I couldjust go like that?

236 
00:11:53.915 --> 00:11:56.210
That would be coolif that was a thing.

237 
00:11:56.211 --> 00:11:57.500
>> It's like the flaming arrow.

238 
00:11:57.501 --> 00:12:00.119
>> Yeah, sometimes I callit the hash rocket, but

239 
00:12:00.120 --> 00:12:02.681
I like to refer to thatas the Anders operator.

240 
00:12:02.682 --> 00:12:03.831
>> Sure.

241 
00:12:03.832 --> 00:12:08.164
>> Yeah,context.Response.ContentType,

242 
00:12:08.165 --> 00:12:11.270
this is really low level stuff.

243 
00:12:11.271 --> 00:12:13.980
Notice I'm not sending it off,I could, but

244 
00:12:13.981 --> 00:12:18.640
I'm not sending it off to an HTMLpage, a static page on disk.

245 
00:12:18.641 --> 00:12:24.910
>> But you are literally handcrafting, the HTTP response.

246 
00:12:24.911 --> 00:12:28.231
>> Yeah, not super friendly andnot super fun, but

247 
00:12:28.232 --> 00:12:33.706
at the same time super powerful anduseful to know that it's possible.

248 
00:12:33.707 --> 00:12:37.540
>> Yeah,full control over all the things.

249 
00:12:37.541 --> 00:12:40.660
>> Exactly,now this is going to be our

250 
00:12:42.580 --> 00:12:46.030
production one, you don'twanna have any errors in here.

251 
00:12:46.031 --> 00:12:49.650
>> Sure, and that's exactly theproduction message we want to send,

252 
00:12:49.651 --> 00:12:50.782
on 53 [LAUGH].

253 
00:12:50.783 --> 00:12:54.850
>> And here's a little funnypiece of history here.

254 
00:12:54.851 --> 00:12:59.090
Internet Explorer,has some issues with short errors.

255 
00:12:59.091 --> 00:13:01.140
So if the error happens, and

256 
00:13:01.141 --> 00:13:06.080
the html page is shorter than about5, 600 bytes, it won't show it.

257 
00:13:06.081 --> 00:13:06.715
>> Are you kidding?

258 
00:13:06.716 --> 00:13:08.470
>> Yeah, it is what it is.

259 
00:13:08.471 --> 00:13:10.380
>> Okay.>> So we're gonna make a new string,

260 
00:13:11.490 --> 00:13:17.480
and we're gonna put 512 spaces,just for IE.

261 
00:13:17.481 --> 00:13:18.730
A little bit of context.

262 
00:13:21.167 --> 00:13:23.350
Life happens, comes at you fast.

263 
00:13:23.351 --> 00:13:26.010
But what we really care about,is up here.

264 
00:13:27.200 --> 00:13:30.551
Maybe we'll want tosay something like,

265 
00:13:30.552 --> 00:13:33.728
Application Error in Production.

266 
00:13:33.729 --> 00:13:36.968
Contact Support.

267 
00:13:41.128 --> 00:13:41.862
Something like that.

268 
00:13:41.863 --> 00:13:48.972
This, SubApp,

269 
00:13:48.973 --> 00:13:52.640
happens within thatExceptionHandler.

270 
00:13:53.890 --> 00:13:58.140
Let's make sure this is a littlebit of fun as we try to figure out.

271 
00:13:58.141 --> 00:13:59.821
>> Make sure things are lined up.

272 
00:13:59.822 --> 00:14:02.376
>> Do I need that?

273 
00:14:02.377 --> 00:14:04.002
I need that.

274 
00:14:04.003 --> 00:14:06.246
There we go,let's see if that builds.

275 
00:14:06.247 --> 00:14:07.604
>> There's an extra.

276 
00:14:11.883 --> 00:14:12.965
You need a paren.

277 
00:14:12.966 --> 00:14:16.890
>> Paren, because all of that is.

278 
00:14:16.891 --> 00:14:18.380
Well, that one got dropped down,there we go.

279 
00:14:18.381 --> 00:14:18.880
>> Yeah, there it is.

280 
00:14:20.260 --> 00:14:21.200
>> Well this isactually interesting.

281 
00:14:21.201 --> 00:14:24.150
The fact that I'm having troubledoing that, kind of shows that at

282 
00:14:24.151 --> 00:14:27.340
some point I'm gonna wanna graduate->> To something a little bit more

283 
00:14:27.341 --> 00:14:27.853
sophisticated.

284 
00:14:27.854 --> 00:14:33.120
>> To putting maybe that in a class,because that, I enjoy doing,

285 
00:14:33.121 --> 00:14:38.200
app.Use this and I go app.Use,I like using all this stuff.

286 
00:14:38.201 --> 00:14:41.770
This is great, look at that,Use middleware, how do I do that?

287 
00:14:41.771 --> 00:14:43.280
Why do this?

288 
00:14:43.281 --> 00:14:44.162
But that's fine.

289 
00:14:44.163 --> 00:14:46.471
Use ExceptionHandler isa middleware helper, and

290 
00:14:46.472 --> 00:14:48.650
I'm passing it what I want it to do.

291 
00:14:48.651 --> 00:14:50.102
>> Right, and like you said,

292 
00:14:50.103 --> 00:14:53.838
you're in a new instance of anotherpipeline that's being retried.

293 
00:14:53.839 --> 00:14:55.990
You have the exact same run syntax,

294 
00:14:55.991 --> 00:15:00.313
that you have little bit furtherdown there on lines 59 through 62.

295 
00:15:00.314 --> 00:15:02.011
>> So while it might bea little bit overwhelming,

296 
00:15:02.012 --> 00:15:03.420
you eventually figure it out.

297 
00:15:03.421 --> 00:15:04.450
>> Yeah.

298 
00:15:04.451 --> 00:15:07.410
>> So this though,happens in development.

299 
00:15:07.411 --> 00:15:09.300
This happens in production.

300 
00:15:09.301 --> 00:15:12.380
So I'm gonna have tochange my environment,

301 
00:15:12.381 --> 00:15:17.989
to indicate that weare in Production.

302 
00:15:24.246 --> 00:15:26.980
So let's give this a try,and see what happens.

303 
00:15:32.172 --> 00:15:33.683
Look at that.

304 
00:15:33.684 --> 00:15:35.550
>> Nice.

305 
00:15:35.551 --> 00:15:36.470
>> That happened.

306 
00:15:37.942 --> 00:15:39.720
Let me try it on Internet,do I have Internet Explorer?

307 
00:15:41.230 --> 00:15:41.860
Make sure it worked.

308 
00:15:44.262 --> 00:15:45.271
Cool.

309 
00:15:45.272 --> 00:15:46.100
>> Works just fine there too.

310 
00:15:46.101 --> 00:15:46.630
>> Works great.

311 
00:15:48.580 --> 00:15:49.940
Now, notice this though.

312 
00:15:49.941 --> 00:15:53.020
The log still happened,the error still happened,

313 
00:15:53.021 --> 00:15:57.870
it's just that I chose to show itto the user in a different way.

314 
00:15:57.871 --> 00:16:02.254
In this context I could then,send it off to raygun.ao, or

315 
00:16:02.255 --> 00:16:04.271
Application Insights, or

316 
00:16:04.272 --> 00:16:07.880
a third party applicationmanagement company.

317 
00:16:07.881 --> 00:16:10.402
>> Sure, at this point you're onlywriting to the response here on

318 
00:16:10.403 --> 00:16:10.970
those lines.

319 
00:16:10.971 --> 00:16:13.700
You can absolutely jump off,send a text message,

320 
00:16:13.701 --> 00:16:15.935
send notification tomy login provider.

321 
00:16:15.936 --> 00:16:18.802
>> Well, and that's why youhave logger factories, and

322 
00:16:18.803 --> 00:16:22.166
we saw at the very end of thebeginner discussion, where we added

323 
00:16:22.167 --> 00:16:25.217
like serial log, a third partylogger we could plug it in,

324 
00:16:25.218 --> 00:16:27.121
even a logger for slack or HipChat.

325 
00:16:27.122 --> 00:16:30.980
So, lot's of opportunities there.

326 
00:16:30.981 --> 00:16:34.300
Now in this case here,we're returning a 500 error.

327 
00:16:36.920 --> 00:16:41.516
But I might also wanna return otherthings, I might wanna understand,

328 
00:16:41.517 --> 00:16:46.120
how can I make a custom pageif there's a 404, for example.

329 
00:16:46.121 --> 00:16:49.710
So this exception here,this, I forced an exception.

330 
00:16:49.711 --> 00:16:52.060
Let us force a 404.

331 
00:16:53.090 --> 00:16:57.220
I could maybe make a file andthen, not ask for it.

332 
00:16:57.221 --> 00:17:00.762
But because we are done here,at the HTTP level,

333 
00:17:00.763 --> 00:17:06.930
I'm gonna show you that we can goand say, I wanna return a 404.

334 
00:17:06.931 --> 00:17:11.090
And then we have to goan say don't do anything.

335 
00:17:12.610 --> 00:17:18.593
So 404, we're forcing a 404, our appnow only knows how to say nothing.

336 
00:17:18.594 --> 00:17:20.420
>> Saying, file not found.

337 
00:17:20.421 --> 00:17:22.420
>> Yes, that's the only thingour app knows how to use.

338 
00:17:22.421 --> 00:17:27.360
This is officially the most uselessapp, that is possibly out there.

339 
00:17:32.021 --> 00:17:35.857
And it doesn't even say anything fora 404, it's the lonely and

340 
00:17:35.858 --> 00:17:36.940
sad blank 404.

341 
00:17:39.870 --> 00:17:45.360
Same kind of thing,this UseExceptionHandler idea,

342 
00:17:45.361 --> 00:17:50.295
I can go and say register,just like we registered our

343 
00:17:50.296 --> 00:17:53.330
ExceptionHandler there, I couldsay not use ExceptionHandler.

344 
00:17:53.331 --> 00:17:59.390
But I could say UseStatusCodePages.

345 
00:17:59.391 --> 00:18:03.850
And then in here,we could say NOT FOUND!

346 
00:18:10.630 --> 00:18:12.680
It's not you it's me.

347 
00:18:14.808 --> 00:18:18.410
By saying, UseStatusCodePages andthen passing in that

348 
00:18:18.411 --> 00:18:22.335
additional sub pipeline, that givesme control over what I decide to do.

349 
00:18:22.336 --> 00:18:26.740
For each of these errors,and that can be any error.

350 
00:18:26.741 --> 00:18:30.857
In this case,see what that looks like.

351 
00:18:30.858 --> 00:18:33.040
>> Terrific>> Custom 404.

352 
00:18:33.041 --> 00:18:33.610
>> Simple.

353 
00:18:33.611 --> 00:18:34.600
>> Very nice.

354 
00:18:34.601 --> 00:18:38.230
But again,had to do a little bit of work here.

355 
00:18:38.231 --> 00:18:41.610
And I didn't really manipulate,the custom middleware.

356 
00:18:41.611 --> 00:18:43.420
I understand, that you havean example that's a little more

357 
00:18:43.421 --> 00:18:44.210
sophisticated.

358 
00:18:44.211 --> 00:18:46.223
>> Yeah, we can get a littlebit more sophisticated on my

359 
00:18:46.224 --> 00:18:46.771
machine now.

360 
00:18:46.772 --> 00:18:48.760
We're gonna take a look->> So let's take a second, and

361 
00:18:48.761 --> 00:18:52.490
lets switch over to your box, andsee what's going on in your machine.

362 
00:18:52.491 --> 00:18:55.550
>> So we've seen a number ofthings here with the environment,

363 
00:18:55.551 --> 00:18:57.230
and we're changingthe environment and

364 
00:18:57.231 --> 00:18:59.648
different thingshappen on the screen.

365 
00:18:59.649 --> 00:19:02.490
So, I wanna actually startputting information about,

366 
00:19:02.491 --> 00:19:06.330
what environment I'm in onthe screen as a little indicator,

367 
00:19:06.331 --> 00:19:09.060
a little image sothat I know that I'm in development.

368 
00:19:09.061 --> 00:19:10.800
I'm in staging or I'm in production.

369 
00:19:10.801 --> 00:19:12.770
So I'm gonna start off,

370 
00:19:12.771 --> 00:19:15.170
I'm gonna show you somecode that we wrote here.

371 
00:19:15.171 --> 00:19:19.736
I wanna use syntax, like this,UseEnvironmentDisplay.

372 
00:19:19.737 --> 00:19:22.400
>> Okay, so we did tag helpers,I could go and make one,

373 
00:19:22.401 --> 00:19:24.390
that output the environment.

374 
00:19:24.391 --> 00:19:26.200
But I'd probably,have to do that on every page.

375 
00:19:26.201 --> 00:19:27.990
>> Right, you'd have toinclude that everywhere.

376 
00:19:27.991 --> 00:19:29.760
By making some middleware,

377 
00:19:29.761 --> 00:19:33.870
that includes that environment labeleverywhere, it automatically gets

378 
00:19:33.871 --> 00:19:39.159
processed in the pipeline as wehit that, during processing.

379 
00:19:39.160 --> 00:19:41.490
>> I see, so I've got a pieceof diagnostics middleware,

380 
00:19:41.491 --> 00:19:44.030
as opposed to something I'd addto my layout page in my view.

381 
00:19:44.031 --> 00:19:45.750
>> Exactly, it's always there and

382 
00:19:45.751 --> 00:19:49.570
when I don't need it,I can comment it out.

383 
00:19:49.571 --> 00:19:52.851
Or, as I'll show you in a littlebit, I've actually written it so

384 
00:19:52.852 --> 00:19:56.325
it reads a configuration option,and will activate appropriately.

385 
00:19:56.326 --> 00:19:58.860
So this Use middleware display,

386 
00:19:58.861 --> 00:20:03.395
it's an extension method usingthat same Use Syntax that.

387 
00:20:03.396 --> 00:20:08.253
>> So when you go app., if youzoom in on that, each of those,

388 
00:20:08.254 --> 00:20:12.841
yeah zoom in on those,you can see that each of the uses.

389 
00:20:12.842 --> 00:20:14.019
>> There they are.

390 
00:20:14.020 --> 00:20:18.532
>> They all have that little downarrow, they've been spot-welded onto

391 
00:20:18.533 --> 00:20:22.743
the app object, and that's whenuser environment display showed

392 
00:20:22.744 --> 00:20:25.990
up because you declared itas an extension method.

393 
00:20:25.991 --> 00:20:28.020
>> I declared it asan extension method and

394 
00:20:29.150 --> 00:20:32.380
all I did was create anotherclass out here that just

395 
00:20:32.381 --> 00:20:34.980
houses some middlewareextension methods.

396 
00:20:34.981 --> 00:20:37.740
So here I have userenvironment display,

397 
00:20:37.741 --> 00:20:42.400
I paste in that application builder,right, that's this app thing.

398 
00:20:42.401 --> 00:20:46.200
>> You said this, IApp, that'sthe syntax for an extension method.

399 
00:20:46.201 --> 00:20:49.370
And what's funny about this isthat this is a nothing method.

400 
00:20:49.371 --> 00:20:49.890
>> Exactly.

401 
00:20:49.891 --> 00:20:50.920
>> It's one line.

402 
00:20:50.921 --> 00:20:52.480
>> Right.>> This makes me feel like

403 
00:20:52.481 --> 00:20:56.110
you could probably justsay app.UseMiddleware.

404 
00:20:56.111 --> 00:20:59.240
>> Absolutely, but this gives methat little bit of syntactic sugar

405 
00:20:59.241 --> 00:21:01.360
that I can just say app.Use and

406 
00:21:01.361 --> 00:21:04.750
go find that named piece ofmiddleware that I like to use.

407 
00:21:04.751 --> 00:21:08.380
>> Syntactic sugar,or syntactic Splenda.

408 
00:21:08.381 --> 00:21:10.610
>> Sure,depending on your dietary needs.

409 
00:21:10.611 --> 00:21:11.260
>> I'm just saying.

410 
00:21:11.261 --> 00:21:12.580
>> Just saying.

411 
00:21:12.581 --> 00:21:13.310
>> Okay.>> All right.

412 
00:21:13.311 --> 00:21:15.360
>> So then use middlewareenvironment display,

413 
00:21:15.361 --> 00:21:16.420
that's where the real work is.

414 
00:21:16.421 --> 00:21:17.720
>> That's where the real work is.

415 
00:21:17.721 --> 00:21:21.910
So I wrote this environmentdisplay class and

416 
00:21:21.911 --> 00:21:23.740
it's actually a pretty simple class,

417 
00:21:23.741 --> 00:21:27.240
I don't have to inherit from somebase class to write middleware.

418 
00:21:27.241 --> 00:21:28.630
>> Really it's just a plain object.

419 
00:21:28.631 --> 00:21:31.940
>> It's just a plain object,the only requirement

420 
00:21:31.941 --> 00:21:36.490
is that you havea task invoke method.

421 
00:21:36.491 --> 00:21:39.790
So this is an async task invokethat's going to receive,

422 
00:21:39.791 --> 00:21:42.259
it always receives the HTTP context

423 
00:21:43.440 --> 00:21:47.720
when the pipeline wants to invokethis particular piece of middleware.

424 
00:21:47.721 --> 00:21:50.375
>> I see, so kind of thinkingback to that image as you're

425 
00:21:50.376 --> 00:21:53.319
going in the chain, when it'syour turn and they say next and

426 
00:21:53.320 --> 00:21:55.835
then you have to think about[CROSSTALK] of context.

427 
00:21:55.836 --> 00:21:57.724
>> You got it, the constructor,

428 
00:21:57.725 --> 00:22:00.849
I'm receiving a number ofinput parameters here,

429 
00:22:00.850 --> 00:22:04.720
a request delegate forwhat the next item in the chain is.

430 
00:22:04.721 --> 00:22:08.850
So this is called when the chain isbeing built, so it's giving me some

431 
00:22:08.851 --> 00:22:11.390
information as to who's nextthat I'm going to call.

432 
00:22:11.391 --> 00:22:14.010
And I'm also grabbing someinformation about the hosting

433 
00:22:14.011 --> 00:22:16.550
environment and my configuration.

434 
00:22:16.551 --> 00:22:18.760
>> Andthis is using dependency injection,

435 
00:22:18.761 --> 00:22:23.290
you're getting those because you putthem in the method signature, and

436 
00:22:23.291 --> 00:22:24.870
we'll learn about thatin another module.

437 
00:22:24.871 --> 00:22:29.370
>> Yep, yep, so I'm stashing themin some read-only fields here on

438 
00:22:29.371 --> 00:22:32.060
lines 19 through 21.

439 
00:22:32.061 --> 00:22:34.138
And then I'm goingto come down here,

440 
00:22:34.139 --> 00:22:38.660
I have an is enabled checkhere to say if there's

441 
00:22:38.661 --> 00:22:43.550
an environment display set in myconfiguration, grab that value,

442 
00:22:43.551 --> 00:22:47.550
otherwise don't displaythe environment, it's false.

443 
00:22:47.551 --> 00:22:50.770
So by default I'm going to turnit on inside my configuration.

444 
00:22:51.980 --> 00:22:55.180
But let's actually take a lookat the invoke where I'm actually

445 
00:22:55.181 --> 00:22:58.035
working with the middleware here,writing and

446 
00:22:58.036 --> 00:23:00.105
interacting with that context.

447 
00:23:00.106 --> 00:23:04.315
So the first things I'm doinghere is I'm grabbing the actual

448 
00:23:04.316 --> 00:23:07.635
HTML from my glyph that Iwanna drop on the response.

449 
00:23:07.636 --> 00:23:11.380
I have a pair of helper methods downhere that all they do is generate

450 
00:23:11.381 --> 00:23:14.300
some CSS style to add to the head,and

451 
00:23:14.301 --> 00:23:18.530
then the actual div that I'm gonnadrop on the body of my page.

452 
00:23:18.531 --> 00:23:21.650
>> I see, now are these gonnabe all together in one section?

453 
00:23:21.651 --> 00:23:22.732
>> No, they're not.

454 
00:23:22.733 --> 00:23:26.800
I wanna put my head elements here,my CSS stuff, up in the top inside

455 
00:23:26.801 --> 00:23:30.350
the head of my page, because we likeour styles to be inside the head so

456 
00:23:30.351 --> 00:23:32.040
they get processed nicely.

457 
00:23:32.041 --> 00:23:36.770
But then I'm gonna add this elementat the very bottom of my page, so

458 
00:23:36.771 --> 00:23:40.355
that it gets added on to everypage right before the body tag,

459 
00:23:40.356 --> 00:23:43.310
the close body tag that is, okay.

460 
00:23:43.311 --> 00:23:45.719
So I'm adding them intwo different places.

461 
00:23:46.770 --> 00:23:49.180
Now returning backhere to the processing,

462 
00:23:49.181 --> 00:23:54.050
I grab a reference to the currentcontext response body.

463 
00:23:54.051 --> 00:23:58.210
So as the HTTP pipeline ishappening, I'm gonna go and

464 
00:23:58.211 --> 00:24:01.724
get a copy of what's been addedto the response at this point.

465 
00:24:01.725 --> 00:24:05.457
>> That's not, and I'm curious,that's not super efficient right?

466 
00:24:05.458 --> 00:24:06.279
>> Not, it's not.

467 
00:24:06.280 --> 00:24:08.717
>> This isn't somethingyou'd go to production with.

468 
00:24:08.718 --> 00:24:09.887
>> No.>> I mean, with respect,

469 
00:24:09.888 --> 00:24:13.066
isn't this technique, it's a littleaggressive in the sense of you are,

470 
00:24:13.067 --> 00:24:14.869
like you said you'rejust making a copy.

471 
00:24:14.870 --> 00:24:15.418
>> Yeah.>> So

472 
00:24:15.419 --> 00:24:19.103
that kinda tells me that middlewarecan both do good and evil.

473 
00:24:19.104 --> 00:24:19.876
>> Absolutely, right?

474 
00:24:19.877 --> 00:24:24.120
>> Yeah, you could write middlewarethat isn't efficient, that uses

475 
00:24:24.121 --> 00:24:28.133
a lot of memory, but runs a regularexpression on the entire body.

476 
00:24:28.134 --> 00:24:29.550
>> Gosh yes, yeah.

477 
00:24:29.551 --> 00:24:32.750
>> Okay, so all right, this is justa sample to show how some of these

478 
00:24:32.751 --> 00:24:34.510
things work, it's not optimized.

479 
00:24:34.511 --> 00:24:36.030
>> Understood, butit is very powerful.

480 
00:24:36.031 --> 00:24:36.710
>> Absolutely, and

481 
00:24:36.711 --> 00:24:40.210
we're gonna see some of thathere in this next couple lines.

482 
00:24:40.211 --> 00:24:43.950
So I create a memory stream thereon 57, of course using a using

483 
00:24:43.951 --> 00:24:47.040
statement so we release ourmemory when we're done.

484 
00:24:47.041 --> 00:24:49.480
>> I'm gonna get a copy of,

485 
00:24:49.481 --> 00:24:52.990
I'm gonna put my memorystream back into the context.

486 
00:24:54.390 --> 00:24:58.600
So now I'm receiving what's goingto be written into my response

487 
00:24:58.601 --> 00:25:01.620
in my memory stream soI can analyze that content.

488 
00:25:01.621 --> 00:25:06.260
Typically response is a stream thatyou can't scan through and modify.

489 
00:25:06.261 --> 00:25:09.440
So andthen I do this await next, right

490 
00:25:09.441 --> 00:25:14.430
this is that delegate that we gotpassed up here in the constructor.

491 
00:25:14.431 --> 00:25:17.660
It says here's the next thingto execute in the pipeline,

492 
00:25:17.661 --> 00:25:22.840
so execute those next things, go allthe way through until you terminate,

493 
00:25:22.841 --> 00:25:24.610
get to that MVC action method.

494 
00:25:24.611 --> 00:25:27.610
>> Sothe entire page finishes its job?

495 
00:25:27.611 --> 00:25:30.680
>> Right, it's done renderingall of its HTML and

496 
00:25:30.681 --> 00:25:33.140
it's placed it on the response body,

497 
00:25:33.141 --> 00:25:36.840
which as we know is now ourmemory stream that we control.

498 
00:25:37.900 --> 00:25:41.030
>> All right, soI've now intercepted and

499 
00:25:41.031 --> 00:25:42.720
captured that content.

500 
00:25:42.721 --> 00:25:45.530
So now on 64, I'm gonna put the old,

501 
00:25:45.531 --> 00:25:49.760
the previous body that was alreadythere back onto the response.

502 
00:25:49.761 --> 00:25:53.060
Make sure that I'm working withan actual HTML output right,

503 
00:25:53.061 --> 00:25:55.100
I don't wanna go andintercept JavaScript or CSS.

504 
00:25:56.270 --> 00:26:00.760
And then I'm gonna write backinto that, if it's not HTML,

505 
00:26:00.761 --> 00:26:03.000
I'm gonna write out whatexactly was output.

506 
00:26:05.050 --> 00:26:08.600
The real interception here andthe power that we're gonna do,

507 
00:26:08.601 --> 00:26:13.040
I'm just doing a string

508 
00:26:13.041 --> 00:26:17.500
variable here to grab that contentthat was written into that stream.

509 
00:26:17.501 --> 00:26:23.060
And then I'm gonna insertmy CSS at the top,

510 
00:26:23.061 --> 00:26:24.830
right before the end head tag.

511 
00:26:24.831 --> 00:26:27.910
And then, I'm gonna replacethe body tag with my div and

512 
00:26:27.911 --> 00:26:31.020
the end body tag, andthen write that back out.

513 
00:26:31.021 --> 00:26:35.980
So I've intercepted, modified thecontent, and written it all back out

514 
00:26:35.981 --> 00:26:39.850
all in one shot here,in couple dozen lines of code.

515 
00:26:39.851 --> 00:26:42.704
>> Yeah.>> So not bad, if I run this now and

516 
00:26:42.705 --> 00:26:47.157
we can actually take a lookat how we're modifying.

517 
00:26:47.158 --> 00:26:51.920
This is the default projectthat comes with Visual Studio.

518 
00:26:51.921 --> 00:26:54.450
>> Okay, so the only thing you'vedone is add your middleware and

519 
00:26:54.451 --> 00:26:55.610
said use.

520 
00:26:55.611 --> 00:26:56.970
>> And use that, right.

521 
00:26:56.971 --> 00:26:58.360
And now I get my little glyph here,

522 
00:26:58.361 --> 00:27:00.150
this little deer thatsays it's developed.

523 
00:27:00.151 --> 00:27:01.020
>> The development deer.

524 
00:27:01.021 --> 00:27:02.290
>> That's the development deer.

525 
00:27:02.291 --> 00:27:07.760
So I can go andchange my configuration over here.

526 
00:27:07.761 --> 00:27:15.550
I can turn that off by flipping myconfiguration and if I restart.

527 
00:27:17.260 --> 00:27:20.180
>> And you could also perhapsset your configuration

528 
00:27:20.181 --> 00:27:21.406
to reload on change.

529 
00:27:21.407 --> 00:27:22.202
>> Yes, yep.

530 
00:27:22.203 --> 00:27:24.830
>> We saw that inan earlier module as well.

531 
00:27:24.831 --> 00:27:25.510
>> Now that's interesting,

532 
00:27:25.511 --> 00:27:30.260
it didn't pick it up even though Iset environment display to false.

533 
00:27:30.261 --> 00:27:30.980
>> Did you restart?

534 
00:27:30.981 --> 00:27:34.720
>> I believe I clickedRestart over here.

535 
00:27:36.030 --> 00:27:37.320
Let's take a quick look.

536 
00:27:38.580 --> 00:27:39.940
There is a check here.

537 
00:27:41.420 --> 00:27:44.400
>> Let's look at your check foryour config.

538 
00:27:44.401 --> 00:27:45.110
>> You know what?

539 
00:27:45.111 --> 00:27:47.336
>> I think it might be where->> I'm not actually doing the check

540 
00:27:47.337 --> 00:27:49.480
for the config,I have this is enabled here.

541 
00:27:49.481 --> 00:27:50.260
>> But you never checked for it.

542 
00:27:50.261 --> 00:27:51.540
>> And I never checked for it.

543 
00:27:51.541 --> 00:27:54.280
>> So then, if you're in the middleof this and you wanted to go and

544 
00:27:54.281 --> 00:27:55.650
check for it,you should probably check for

545 
00:27:55.651 --> 00:27:57.490
it really early on before you doany of that memory stream stuff.

546 
00:27:57.491 --> 00:28:00.010
>> Before I do any of thatstuff just let it go and

547 
00:28:00.011 --> 00:28:01.141
do its await next.

548 
00:28:01.142 --> 00:28:04.120
>> So if it's not enabledthen you just await next?

549 
00:28:04.121 --> 00:28:05.550
>> So let's just do that right here.

550 
00:28:05.551 --> 00:28:11.573
>> And then [CROSSTALK].>> If not is enabled I can say await

551 
00:28:11.574 --> 00:28:18.769
next, pass the context, and return.

552 
00:28:20.984 --> 00:28:22.764
>> Has it returned task is zero?

553 
00:28:22.765 --> 00:28:24.928
>> You're right.

554 
00:28:24.929 --> 00:28:26.594
>> Task.from result.

555 
00:28:26.595 --> 00:28:28.893
>> From result.

556 
00:28:33.915 --> 00:28:34.902
>> What's it say?

557 
00:28:40.151 --> 00:28:41.118
What's it say?

558 
00:28:41.119 --> 00:28:44.046
>> It's telling me that a returnkeyword must be followed by

559 
00:28:44.047 --> 00:28:45.268
an object expression.

560 
00:28:47.770 --> 00:28:48.928
>> Return await?

561 
00:28:57.308 --> 00:28:59.820
Do you return the next?

562 
00:28:59.821 --> 00:29:02.013
Do you return await next?

563 
00:29:02.014 --> 00:29:03.923
>> You know what,let's just do that.

564 
00:29:08.257 --> 00:29:10.100
And restart.

565 
00:29:10.101 --> 00:29:10.820
>> No.>> Nope, didn't like it.

566 
00:29:12.030 --> 00:29:16.470
>> Rather than returning remove thatreturn and then just fall through.

567 
00:29:16.471 --> 00:29:21.760
So if it's enabled else,and then do the rest of it.

568 
00:29:21.761 --> 00:29:23.180
>> That make sense, okay.

569 
00:29:23.181 --> 00:29:24.200
>> All right,let's see if that works.

570 
00:29:26.424 --> 00:29:28.271
>> And build.

571 
00:29:28.272 --> 00:29:31.500
>> Cuz when your configuration isset up right you wanna do as little

572 
00:29:31.501 --> 00:29:33.300
as possible if not nothing.

573 
00:29:33.301 --> 00:29:35.190
>> Sure, there it goes.

574 
00:29:37.400 --> 00:29:40.320
>> I like development deer,it's like ship it squirrel.

575 
00:29:40.321 --> 00:29:43.330
>> It is, there's actuallya whole family of the deer there.

576 
00:29:43.331 --> 00:29:44.730
>> And there you go.>> And there we go.

577 
00:29:44.731 --> 00:29:45.690
>> Very cool.

578 
00:29:45.691 --> 00:29:48.510
>> So there's several other deerthere that when you have different

579 
00:29:48.511 --> 00:29:51.780
environments it'll show youthose images appropriately.

580 
00:29:51.781 --> 00:29:55.950
So it's a simple piece of middlewarethat's showing how we can do this

581 
00:29:55.951 --> 00:30:00.250
great power, modifying that content,that HTML that's being output.

582 
00:30:00.251 --> 00:30:03.720
You can also change this sothat your managing and outputting

583 
00:30:03.721 --> 00:30:08.600
images or other binary contentappropriately for your application.

584 
00:30:08.601 --> 00:30:12.310
There's a lot you can do here andwe're just scratching the surface.

585 
00:30:12.311 --> 00:30:15.883
>> Middleware is fundamentalto ASP.NET Core.

586 
00:30:15.884 --> 00:30:16.401
>> It is.

587 
00:30:16.402 --> 00:30:20.510
MVC, the pattern MVC,is itself middleware.

588 
00:30:20.511 --> 00:30:22.070
>> It is.

589 
00:30:22.071 --> 00:30:23.250
>> It's a collection of middleware,Identity is middleware.

590 
00:30:23.251 --> 00:30:26.490
Everything is this middlewarepipeline concept, whether it be

591 
00:30:26.491 --> 00:30:29.734
a tiny piece of middlewarethat maybe logs something, or

592 
00:30:29.735 --> 00:30:32.230
squirrels away a request ID, or

593 
00:30:32.231 --> 00:30:35.770
it's something big thatfundamentally modifies the HTML.

594 
00:30:35.771 --> 00:30:39.650
There's a lot of power there,and of course measure and

595 
00:30:39.651 --> 00:30:41.910
test to make surethe performance is appropriate.

596 
00:30:41.911 --> 00:30:42.460
>> Yes.

597 
00:30:42.461 --> 00:30:44.220
>> But super powerful stuff.

598 
00:30:44.221 --> 00:30:46.702
So we'll take a little break andwe'll come right back.

