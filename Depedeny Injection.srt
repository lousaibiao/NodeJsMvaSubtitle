1 
00:00:00.770 --> 00:00:01.745
Hi, I'm Scott Hanselman.

2 
00:00:01.746 --> 00:00:02.592
>> And I'm Jeff Fritz.

3 
00:00:02.593 --> 00:00:06.748
>> And this isIntermediate ASP.NET Core 1.0.

4 
00:00:06.749 --> 00:00:09.320
We've covered a numberof different topics.

5 
00:00:09.321 --> 00:00:12.080
Be sure to explore all ofthe different things going on

6 
00:00:12.081 --> 00:00:14.750
today in thisMicrosoft Virtual Academy.

7 
00:00:14.751 --> 00:00:18.410
Right now, we're talkingabout dependency injection.

8 
00:00:18.411 --> 00:00:21.340
>> It's a big couple of words,but it really breaks

9 
00:00:21.341 --> 00:00:24.200
down into something that's easy tounderstand when you look at it.

10 
00:00:24.201 --> 00:00:27.100
>> Yeah, there's subtletiesto dependency injection.

11 
00:00:27.101 --> 00:00:30.800
But for the most part, the way Ilike to think about it is I'm gonna

12 
00:00:30.801 --> 00:00:36.450
spend less time new'ing up something>> I say that, I say new'ing it up.

13 
00:00:36.451 --> 00:00:39.940
Like as you look throughyour ASP.net core code,

14 
00:00:39.941 --> 00:00:43.790
you won't find yourself saying,new this and new that as much.

15 
00:00:43.791 --> 00:00:44.390
>> Right.

16 
00:00:44.391 --> 00:00:46.260
They say new is glue, right?

17 
00:00:46.261 --> 00:00:47.890
As soon as you say new something,

18 
00:00:47.891 --> 00:00:52.420
you're hooked into the signatureof a constructor for that object.

19 
00:00:52.421 --> 00:00:53.190
>> Well that's good.

20 
00:00:53.191 --> 00:00:55.400
We use that. Yeah.

21 
00:00:55.401 --> 00:00:55.740
>> Go for it.

22 
00:00:55.741 --> 00:00:56.460
>> Did you make that up?

23 
00:00:56.461 --> 00:00:57.960
>> No.>> All right, we're gonna take that.

24 
00:00:57.961 --> 00:00:59.820
>> We're gonna have to thankSteve Smith for that one.

25 
00:00:59.821 --> 00:01:00.360
>> Yeah?>> Yeah.

26 
00:01:00.361 --> 00:01:01.730
>> Yeah, I like that, new as glue.

27 
00:01:01.731 --> 00:01:03.268
So dependency injection and

28 
00:01:03.269 --> 00:01:05.860
then they also call itinversion of control.

29 
00:01:05.861 --> 00:01:07.360
>> Yes.>> Another way of saying

30 
00:01:07.361 --> 00:01:11.680
let someone else be responsible forcreating that.

31 
00:01:11.681 --> 00:01:15.330
And in the past we wouldhave like factories and

32 
00:01:15.331 --> 00:01:18.590
that was an attempt at lettingsomeone else be responsible.

33 
00:01:18.591 --> 00:01:21.090
We would have an interface andthen we would have an i factor,

34 
00:01:21.091 --> 00:01:22.870
dah dah dah, andit would make stuff.

35 
00:01:22.871 --> 00:01:27.210
But really what dependency injectionis about is saying, it is my intent

36 
00:01:27.211 --> 00:01:31.260
that I need these things, I declarethe need for these objects.

37 
00:01:31.261 --> 00:01:32.670
>> Yes, yes.>> I need these interfaces.

38 
00:01:32.671 --> 00:01:34.330
I don't care how I get them.

39 
00:01:34.331 --> 00:01:37.530
I just need to make sure thatby the time I get called,

40 
00:01:37.531 --> 00:01:39.580
that they have arrived andthat they've been setup.

41 
00:01:39.581 --> 00:01:42.190
>> Somebody else take responsibilityfor creating them and

42 
00:01:42.191 --> 00:01:43.580
passing them to me.

43 
00:01:43.581 --> 00:01:44.520
>> Well said.

44 
00:01:44.521 --> 00:01:47.110
>> So let's switch overto my machine here and

45 
00:01:47.111 --> 00:01:50.010
take a look at a couple of examplesof dependency injection and

46 
00:01:50.011 --> 00:01:55.110
then we'll try to create somethingof our own because a few moments ago

47 
00:01:55.111 --> 00:01:58.310
in the previous module,did some discussion of middle-ware.

48 
00:01:58.311 --> 00:01:59.545
>> Yes.>> We'll do another piece of

49 
00:01:59.546 --> 00:02:02.010
middle-ware that then usesdependency injection and

50 
00:02:02.011 --> 00:02:03.980
we'll see how itaffects its behavior.

51 
00:02:03.981 --> 00:02:07.310
All right, so here one of the thingsthat we wanna point out as we

52 
00:02:07.311 --> 00:02:10.180
keep coming back to Startup.

53 
00:02:10.181 --> 00:02:13.600
Startup has this iHostingenvironment that's

54 
00:02:13.601 --> 00:02:18.070
being passed in onthe constructor there.

55 
00:02:18.071 --> 00:02:18.835
Who makes that?

56 
00:02:18.836 --> 00:02:22.100
Nowhere in this applicationhas someone said

57 
00:02:22.101 --> 00:02:25.350
var x equals newhosting environment.

58 
00:02:25.351 --> 00:02:29.090
That's getting handedin by the system.

59 
00:02:29.091 --> 00:02:31.160
The system has handed me that,right?

60 
00:02:32.170 --> 00:02:34.398
>> Yeah.It's one of those things that

61 
00:02:34.399 --> 00:02:38.470
the framework takes care of foryou and it just arrives for you.

62 
00:02:38.471 --> 00:02:39.220
For the most part,

63 
00:02:39.221 --> 00:02:42.270
for the intermediate level thatyou're working with the framework,

64 
00:02:42.271 --> 00:02:44.830
it's just handed to you.

65 
00:02:44.831 --> 00:02:47.030
[CROSSTALK]>> Baked in to ASP.net.

66 
00:02:47.031 --> 00:02:53.750
So if I wanted an ILoggerFactoryhere, I would just add it.

67 
00:02:53.751 --> 00:02:59.710
And I can have this parameterlist in a method or

68 
00:02:59.711 --> 00:03:03.470
in this case, in a constructor, bein whatever order, doesn't matter,

69 
00:03:03.471 --> 00:03:05.000
and I can name thesewhatever I want.

70 
00:03:05.001 --> 00:03:08.510
It looks at the method signature,and it says wow!

71 
00:03:10.070 --> 00:03:11.840
He or she wants this andthey want that.

72 
00:03:13.100 --> 00:03:16.320
So I'll have to go and find out ifI know how to make one of those.

73 
00:03:16.321 --> 00:03:18.710
>> Right.Then typically there's some sort of

74 
00:03:18.711 --> 00:03:21.870
mapping in dependency injectionthat says, if you're looking for

75 
00:03:21.871 --> 00:03:25.680
one of these things,this interface hosting environment,

76 
00:03:25.681 --> 00:03:30.070
you're actually going to use oneof these concrete objects instead.

77 
00:03:30.071 --> 00:03:34.145
>> And before, you had mentionedconfigure services and

78 
00:03:34.146 --> 00:03:36.750
how configure is differentfrom configure services.

79 
00:03:36.751 --> 00:03:41.940
There's a lot happening inside ofsomething as innocuous as Add MVC,

80 
00:03:41.941 --> 00:03:42.490
isn't it?

81 
00:03:42.491 --> 00:03:44.100
>> Yeah,there's a lot of configuration,

82 
00:03:44.101 --> 00:03:47.280
a lot of services tosupport the MVC framework,

83 
00:03:47.281 --> 00:03:50.850
to do being configured insidethe dependency injection container

84 
00:03:50.851 --> 00:03:54.490
all wrapped up in thisone little method for us.

85 
00:03:54.491 --> 00:03:59.605
>> And in a previous example,during the beginner

86 
00:03:59.606 --> 00:04:03.880
ASP.NET Core 1.0, we made justa very simple directory browser.

87 
00:04:03.881 --> 00:04:07.840
We turned on static files and thenwe said add directory browser or

88 
00:04:07.841 --> 00:04:10.130
use directory browser andthen we get an error.

89 
00:04:10.131 --> 00:04:11.210
It blew up.

90 
00:04:11.211 --> 00:04:14.420
It said, I am not able to findHTTP format or something,

91 
00:04:14.421 --> 00:04:17.395
something while tryingto get this other thing.

92 
00:04:17.396 --> 00:04:19.570
>> [LAUGH]>> And basically,

93 
00:04:19.571 --> 00:04:22.570
I wanted a directory browser andsaid well, in order to do that,

94 
00:04:22.571 --> 00:04:25.630
I'm in need to be able tomake HTML and format HTML.

95 
00:04:25.631 --> 00:04:29.700
So, it started to build thisdependency tree, it didn't know.

96 
00:04:29.701 --> 00:04:32.230
And I needed to then go andadd directory browser.

97 
00:04:32.231 --> 00:04:36.920
And if we hover over that, it saysadds the middleware services, right?

98 
00:04:36.921 --> 00:04:39.680
It lets the system know aboutall of those things that I

99 
00:04:39.681 --> 00:04:40.540
might need later.

100 
00:04:43.450 --> 00:04:47.236
All right, so down here inconfigure, this is what we used in

101 
00:04:47.237 --> 00:04:50.820
our last little lab,i'm gonna remove all of this here.

102 
00:04:51.890 --> 00:04:55.445
This is the stuff that we built lasttime, this was the little bits of

103 
00:04:55.446 --> 00:04:59.640
middle-ware and we'll just getthat back down to it's default.

104 
00:04:59.641 --> 00:05:00.820
So that's->> Yeah,

105 
00:05:00.821 --> 00:05:02.880
that extra exception handling stuff.

106 
00:05:02.881 --> 00:05:04.510
>> Right.This is just what you get out of

107 
00:05:04.511 --> 00:05:08.130
the box when you typicallymake a file new project.

108 
00:05:08.131 --> 00:05:11.544
We've got ApplicationBuilder app,

109 
00:05:11.545 --> 00:05:16.310
HostingEnvironment which doesn'tlook like we even need right there.

110 
00:05:17.355 --> 00:05:21.220
We could actually build this and

111 
00:05:21.221 --> 00:05:24.990
see that it goes and then I couldremove that, do I have any env?

112 
00:05:24.991 --> 00:05:27.187
I do, I need it right there.

113 
00:05:27.188 --> 00:05:28.730
>> Yeah, mm-hm.

114 
00:05:28.731 --> 00:05:33.300
>> Say add that back all right,and again,

115 
00:05:33.301 --> 00:05:39.239
it's not this name that matters,it's just that interface name.

116 
00:05:39.240 --> 00:05:42.479
Okay, so what we'll do iswe're gonna make a piece of

117 
00:05:42.480 --> 00:05:46.511
middle-ware and you showed us inthe middle-ware discussion how

118 
00:05:46.512 --> 00:05:49.720
middle-ware canfundamentally change.

119 
00:05:49.721 --> 00:05:52.590
>> Yep, it can change your page,it can change your content.

120 
00:05:52.591 --> 00:05:55.665
>> Right, so what we're gonna dois we're gonna make a piece of

121 
00:05:55.666 --> 00:06:00.230
Middle-ware that's going to create,what we're gonna call, request IDs.

122 
00:06:00.231 --> 00:06:02.060
We're gonna make these up.

123 
00:06:02.061 --> 00:06:06.620
You hit it, request one, I hit it,request two and that's gonna give us

124 
00:06:06.621 --> 00:06:10.180
a number of things to think aboutbecause in dependency injection, at

125 
00:06:10.181 --> 00:06:15.960
least in ASP.NET, there's different,I wouldn't say scoping, but

126 
00:06:15.961 --> 00:06:19.160
there's different life cycles forobjects, how long the objects live.

127 
00:06:19.161 --> 00:06:23.800
>> Yeah, when I request one of theseobjects, is it the same one that's

128 
00:06:23.801 --> 00:06:28.010
always been around or do I get a newcopy of that object each time?

129 
00:06:28.011 --> 00:06:30.390
So yeah, how long dothey stick around for me?

130 
00:06:30.391 --> 00:06:36.005
>> Right, and the three kindsof lifetimes in the context

131 
00:06:36.006 --> 00:06:40.990
ASP.NET core, there's a singleton,so there's only one of these.

132 
00:06:40.991 --> 00:06:41.558
>> Ever, right?

133 
00:06:41.559 --> 00:06:44.930
>> So like IApplicationBuilder, likethere's only one and you can ask for

134 
00:06:44.931 --> 00:06:47.490
it as many times as you want,but that's just be one.

135 
00:06:47.491 --> 00:06:49.798
>> You're gettinga pointer to that object.

136 
00:06:49.799 --> 00:06:50.630
>> All right!

137 
00:06:50.631 --> 00:06:55.610
And then there's Scoped, this isthe term they use in ASP.NET Core.

138 
00:06:55.611 --> 00:06:57.160
Scoped, and what does that mean?

139 
00:06:57.161 --> 00:07:01.800
>> So Scoped says within the contextof this one request, this one HTTP

140 
00:07:01.801 --> 00:07:06.480
request, pass the same instanceof that concrete object around.

141 
00:07:06.481 --> 00:07:08.870
So at the first requestof that object,

142 
00:07:08.871 --> 00:07:11.300
you're getting new instance of that.

143 
00:07:11.301 --> 00:07:16.067
But in every subsequent request forthat object within your classes,

144 
00:07:16.068 --> 00:07:20.913
as long as it's within the same HTTPrequest, you'll receive the same

145 
00:07:20.914 --> 00:07:24.572
instance from the dependencyinjection container.

146 
00:07:24.573 --> 00:07:26.457
>> So let me see if I can that Ican explain it in another way and

147 
00:07:26.458 --> 00:07:27.214
see if I can get right.

148 
00:07:27.215 --> 00:07:27.752
>> Sure.

149 
00:07:27.753 --> 00:07:31.050
>> Lets' say I've got middle-warepipeline with a lot of different

150 
00:07:31.051 --> 00:07:34.610
pieces in the middleware,a single call comes in,

151 
00:07:34.611 --> 00:07:37.560
runs through that pipeline andwithin that,

152 
00:07:37.561 --> 00:07:40.930
lots of people want to use my objectlike a log object for example.

153 
00:07:40.931 --> 00:07:41.635
>> Sure, sure.

154 
00:07:41.636 --> 00:07:43.900
>> They're gonna say give methe log, give me the log,

155 
00:07:43.901 --> 00:07:47.385
hand me the log, they are gonnaget the same one if it was scoped.

156 
00:07:47.386 --> 00:07:49.740
>> Yes.>> Cause it's scoped to that

157 
00:07:49.741 --> 00:07:50.660
context.

158 
00:07:50.661 --> 00:07:53.770
>> You might also do that withI guess database connection.

159 
00:07:53.771 --> 00:07:56.260
>> Yep, you might havea database connection that is

160 
00:07:56.261 --> 00:07:58.210
a singleton depending onhow your database works.

161 
00:07:58.211 --> 00:07:59.110
>> Sure.It might

162 
00:07:59.111 --> 00:08:03.100
be one database connectionper request or a transient.

163 
00:08:03.101 --> 00:08:04.420
>> Right, the third option.

164 
00:08:04.421 --> 00:08:06.780
>> Which would be a newone every time you ask.

165 
00:08:06.781 --> 00:08:11.390
>> Yes, every time you ask forone, starting new copy

166 
00:08:11.391 --> 00:08:14.420
of a new instance of that object andsort to pass it in.

167 
00:08:14.421 --> 00:08:18.170
>> Okay, so let's see ifwe can look at request and

168 
00:08:18.171 --> 00:08:20.990
just make up a number to assign torequest and how we would do that.

169 
00:08:20.991 --> 00:08:23.970
So I'm gonna make a piece ofmiddle-ware right now and

170 
00:08:23.971 --> 00:08:27.730
I will go over into,My Solution Explorer.

171 
00:08:27.731 --> 00:08:30.260
We've got our Controllers folder andour Views folder.

172 
00:08:30.261 --> 00:08:36.533
I'm gonna make one,we'll just call it Services. Oops.

173 
00:08:36.534 --> 00:08:37.370
It's hard to see.

174 
00:08:37.371 --> 00:08:38.330
Here we go.

175 
00:08:39.880 --> 00:08:43.840
I tried to zoom and then Imake it so I can't see myself.

176 
00:08:43.841 --> 00:08:45.020
We're gonna add a new class,

177 
00:08:45.021 --> 00:08:49.080
so these request IDs reallyare just gonna be kind of a number.

178 
00:08:50.180 --> 00:08:51.990
We'll say RequestID.

179 
00:08:51.991 --> 00:08:55.250
And again, this something thatwe are making up, all right?

180 
00:08:57.170 --> 00:09:00.820
>> All right,simple example just to show that

181 
00:09:00.821 --> 00:09:04.170
we're counting the requests thatare coming into the service.

182 
00:09:04.171 --> 00:09:04.860
>> Right.

183 
00:09:04.861 --> 00:09:08.148
This is not, nothing morethan what we've made up.

184 
00:09:08.149 --> 00:09:13.920
We are gonna go and say string IDand we'll have, you can get them.

185 
00:09:13.921 --> 00:09:15.110
That's basically all they are.

186 
00:09:15.111 --> 00:09:18.300
It would probably bean IRequest id I would think.

187 
00:09:18.301 --> 00:09:19.230
And then->> We're

188 
00:09:19.231 --> 00:09:22.160
gonna want to change that toan interface from a class.

189 
00:09:22.161 --> 00:09:23.170
>> Yeah, yeah, yeah.

190 
00:09:23.171 --> 00:09:25.970
Well, I need to makean actual RequestID first.

191 
00:09:25.971 --> 00:09:27.810
Actually, let me back up.

192 
00:09:27.811 --> 00:09:29.740
There's a RequestID, right?

193 
00:09:30.760 --> 00:09:32.590
Or do you think I shouldmake it an interface?

194 
00:09:32.591 --> 00:09:33.780
>> Start with the interface.

195 
00:09:33.781 --> 00:09:35.210
>> Okay.

196 
00:09:35.211 --> 00:09:39.330
So to be an IRequestID you didthat right there, is that correct?

197 
00:09:39.331 --> 00:09:41.704
>> We need an interfacedeclaration on line 8.

198 
00:09:42.720 --> 00:09:44.540
>> Public interface IRequestID.

199 
00:09:44.541 --> 00:09:45.250
>> There we go.

200 
00:09:45.251 --> 00:09:46.470
>> All right, cool.

201 
00:09:46.471 --> 00:09:47.178
And then->> And

202 
00:09:47.179 --> 00:09:48.809
then we can implementthat interface.

203 
00:09:48.810 --> 00:09:50.984
>> Sure, well and then I could also,

204 
00:09:50.985 --> 00:09:54.434
I think I can implement thatinterface and let's go and

205 
00:09:54.435 --> 00:09:57.971
make a factory of things thatis gonna go and make those.

206 
00:09:57.972 --> 00:10:02.521
So, it's public interfaceIRequestIDFactory And this is gonna

207 
00:10:02.522 --> 00:10:07.080
be the thing that'll make them,it'll divvy them out, right?

208 
00:10:07.081 --> 00:10:07.747
Dole them out.

209 
00:10:07.748 --> 00:10:09.171
>> Sure.

210 
00:10:09.172 --> 00:10:14.015
>> Make a string, MakeRequestId.

211 
00:10:14.016 --> 00:10:17.164
Okay, let's see ifwe get this right.

212 
00:10:17.165 --> 00:10:18.836
Does that look right?

213 
00:10:18.837 --> 00:10:20.148
>> Looks good.

214 
00:10:20.149 --> 00:10:20.832
>> Okay, so

215 
00:10:20.833 --> 00:10:23.402
that's an IRequestIdFactory>> Uh-huh.

216 
00:10:23.403 --> 00:10:29.252
>> So then we'll needan actual RequestIdFactory,

217 
00:10:29.253 --> 00:10:33.441
derives from IRequestIdFactory.

218 
00:10:43.284 --> 00:10:45.252
Look at that, cool.

219 
00:10:45.253 --> 00:10:46.174
>> Implement it.

220 
00:10:46.175 --> 00:10:47.692
>> Implement that right there?

221 
00:10:47.693 --> 00:10:52.498
Okay, so our RequestIdFactoryis gonna be the thing

222 
00:10:52.499 --> 00:10:54.909
that makes them, right?

223 
00:10:54.910 --> 00:10:56.384
>> Uh-huh.>> It's gonna divvy them out.

224 
00:10:56.385 --> 00:10:59.524
So each time I ask for it,it's gotta do something.

225 
00:10:59.525 --> 00:11:04.002
So does it make a new GUID,a new globally unique identifier?

226 
00:11:04.003 --> 00:11:05.437
>> That's not really as interesting.

227 
00:11:05.438 --> 00:11:08.510
>> No, we need an integer, okay?

228 
00:11:08.511 --> 00:11:10.340
Really allows us to count and

229 
00:11:10.341 --> 00:11:13.612
see that this requestcame after that request.

230 
00:11:13.613 --> 00:11:16.720
>> Interesting, so by making aninteger, having it increase in size,

231 
00:11:16.721 --> 00:11:18.874
we're gonna know thatone came after that one.

232 
00:11:18.875 --> 00:11:26.158
So, then we'll sayprivate int requestid.

233 
00:11:26.159 --> 00:11:30.825
Okay, so then our MakeRequestIdwhich by default says,

234 
00:11:30.826 --> 00:11:35.700
hey, I'm not implemented,will have this go and return.

235 
00:11:35.701 --> 00:11:39.577
And then we're gonna take that ID,

236 
00:11:39.578 --> 00:11:44.366
this requestId here,and I could say ++.

237 
00:11:44.367 --> 00:11:45.781
But why would be a problem?

238 
00:11:45.782 --> 00:11:47.450
>> Yeah, you know what?

239 
00:11:47.451 --> 00:11:49.199
That's not thread safe.

240 
00:11:49.200 --> 00:11:54.149
If we're using a Singleton, if we'reusing one of these other models,

241 
00:11:54.150 --> 00:11:57.638
these scoping where wecould have multiple threads

242 
00:11:57.639 --> 00:12:00.881
requesting access to thisat the same time, you

243 
00:12:00.882 --> 00:12:03.636
could end up with collisions there->> Right.

244 
00:12:03.637 --> 00:12:05.622
>> Right?>> Not incrementing it properly,

245 
00:12:05.623 --> 00:12:07.640
not managing the integer properly,so

246 
00:12:07.641 --> 00:12:10.281
I think I want to do a littlemore thread safe there.

247 
00:12:10.282 --> 00:12:14.160
>> Okay, so what we're gonna do iswe're gonna take this integer here

248 
00:12:14.161 --> 00:12:21.391
and we're gonna use a thing calledInterlocked Which is inside

249 
00:12:21.392 --> 00:12:25.815
of the System.Threading and we'regonna say Interlocked Increment.

250 
00:12:25.816 --> 00:12:29.415
We're gonna go and incrementthat as an atomic operation.

251 
00:12:29.416 --> 00:12:30.362
>> Yep.>> Okay.

252 
00:12:30.363 --> 00:12:33.189
>> And I think we need tomake that a reference.

253 
00:12:33.190 --> 00:12:36.387
>> Uh-huh, exactly, because youdon't actually pass in a copy of that-

254 
00:12:36.388 --> 00:12:37.085
>> Right.

255 
00:12:37.086 --> 00:12:39.669
>> Integer, you pass in a referenceto it, so a pointer to that,

256 
00:12:39.670 --> 00:12:40.584
a reference to that.

257 
00:12:40.585 --> 00:12:44.632
So we're gonna increase that insize, and then pass back the string.

258 
00:12:44.633 --> 00:12:49.418
So our factory now, each time youcall it, you're gonna get one, two,

259 
00:12:49.419 --> 00:12:49.975
three.

260 
00:12:49.976 --> 00:12:54.653
>> Right, and to be clear theInterlocked Increment is a thread

261 
00:12:54.654 --> 00:12:57.416
safe way to work with that integer.

262 
00:12:57.417 --> 00:12:58.130
>> Uh-huh.

263 
00:12:58.131 --> 00:13:02.875
>> So we wont be blocking,we'll be working with it discretely.

264 
00:13:02.876 --> 00:13:07.582
Okay, so we've got ourIRequestID and we can go and

265 
00:13:07.583 --> 00:13:11.413
make a,just like we had one interface and

266 
00:13:11.414 --> 00:13:15.703
then implemented it,let's say RequestID.

267 
00:13:15.704 --> 00:13:22.004
And this one is going to have an ID,IRequestId.

268 
00:13:25.111 --> 00:13:31.430
>> The capital D,>> Capital D, there we go, okay.

269 
00:13:31.431 --> 00:13:33.506
So then where shouldit get that from?

270 
00:13:33.507 --> 00:13:38.162
Right, when you want a RequestId andyou say hey, RequestId.Id,

271 
00:13:38.163 --> 00:13:42.420
that should go and get thatfrom the RequestFactory, right?

272 
00:13:42.421 --> 00:13:44.926
>> Yeah.>> So this RequestId has

273 
00:13:44.927 --> 00:13:46.839
a constructor.

274 
00:13:51.622 --> 00:13:54.503
And it's gonna need to geta hold of that factory and

275 
00:13:54.504 --> 00:13:57.387
then take that ID anddo something with it, right?

276 
00:13:57.388 --> 00:13:59.930
>> Uh-huh.>> So then, it might have an ID and

277 
00:13:59.931 --> 00:14:01.211
pass that around.

278 
00:14:01.212 --> 00:14:05.065
Somehow thing's gonna startgetting a little hairy.

279 
00:14:05.066 --> 00:14:08.515
This is pretty simple, but you canstart to see that there's a little

280 
00:14:08.516 --> 00:14:10.471
bit of inter tangled->> Yeah, there's-

281 
00:14:10.472 --> 00:14:11.655
>> Bit of relationships there.

282 
00:14:11.656 --> 00:14:13.834
>> There's dependenciespassing back and

283 
00:14:13.835 --> 00:14:16.852
forth here that would be trickyto new up by themselves.

284 
00:14:16.853 --> 00:14:21.322
>> Right, so like forexample here in RequestId,

285 
00:14:21.323 --> 00:14:24.237
do I make a RequestIdFactory?

286 
00:14:24.238 --> 00:14:29.665
What we'll do is we'll try tohave it say that it needs one.

287 
00:14:29.666 --> 00:14:32.589
>> Yeah,>> By putting it into the method

288 
00:14:32.590 --> 00:14:37.125
signature of the constructor hereand then I'll scroll it away.

289 
00:14:37.126 --> 00:14:39.335
We see this before we sayunderscore and something.

290 
00:14:39.336 --> 00:14:41.897
That's kind the way to saythat this is a private,

291 
00:14:41.898 --> 00:14:43.820
it's kind of a standard way.

292 
00:14:43.821 --> 00:14:48.960
We'll say MakeRequestId which isgonna do that Interlocked Increment.

293 
00:14:48.961 --> 00:14:55.639
So we'll say private or we'll saya readonly string of RequestId.

294 
00:14:55.640 --> 00:14:59.332
Okay, so let's look at this fora second.

295 
00:14:59.333 --> 00:15:02.588
Here's an interface that sayshere's how we do RequestIds.

296 
00:15:02.589 --> 00:15:04.053
We'll hide that.

297 
00:15:04.054 --> 00:15:08.899
We've got a actual implementationof RequestId that's gonna take

298 
00:15:08.900 --> 00:15:09.755
a factory.

299 
00:15:09.756 --> 00:15:11.038
I'm not newing anything.

300 
00:15:11.039 --> 00:15:14.467
Notice, I haven't saidnew anywhere in here.

301 
00:15:14.468 --> 00:15:17.420
And we're just gonnascroll away that ID.

302 
00:15:17.421 --> 00:15:22.614
And this is a little bit verbosesaying get and all that.

303 
00:15:22.615 --> 00:15:27.024
I'm actually gonna doa simpler property getter with

304 
00:15:27.025 --> 00:15:31.630
our handlers operator orthe little hash rocket there.

305 
00:15:31.631 --> 00:15:34.174
>> Yeah, the C# 6 feature.

306 
00:15:34.175 --> 00:15:37.216
>> Uh-huh, sowhen we asked for an ID,

307 
00:15:37.217 --> 00:15:41.154
give them the private andinternal one, okay?

308 
00:15:41.155 --> 00:15:41.798
>> Yep.

309 
00:15:41.799 --> 00:15:46.198
So then the question is,how long do these things live, okay?

310 
00:15:49.080 --> 00:15:52.320
We haven't said newanywhere in here.

311 
00:15:52.321 --> 00:15:54.850
We haven't newed anything up.

312 
00:15:54.851 --> 00:15:57.760
>> No, these are classes thatstand by themselves right now.

313 
00:15:57.761 --> 00:16:01.959
>> Uh-huh, butRequestId needs a RequestIdFactory.

314 
00:16:01.960 --> 00:16:02.540
>> Uh-huh.>> So,

315 
00:16:02.541 --> 00:16:04.446
one of those needs to be made or

316 
00:16:04.447 --> 00:16:07.435
at least handed in toRequestId at some point.

317 
00:16:07.436 --> 00:16:12.882
And RequestIdFactory,how many of those should there be?

318 
00:16:12.883 --> 00:16:16.783
>> Yeah, if we're managingthe RequestIds across all requests

319 
00:16:16.784 --> 00:16:20.920
coming into the application,you really only want one of these.

320 
00:16:20.921 --> 00:16:23.981
>> Okay, so then that would imply

321 
00:16:23.982 --> 00:16:28.706
that a RequestIdFactorywould be a Singleton.

322 
00:16:28.707 --> 00:16:31.826
Okay, there's just one forthe whole app shared across the app.

323 
00:16:31.827 --> 00:16:34.811
>> Yep.>> All right, so then RequestIds,

324 
00:16:34.812 --> 00:16:38.876
when someone asks for one,how long should they be?

325 
00:16:38.877 --> 00:16:42.733
Because I might ask forRequestIds multiple times, but

326 
00:16:42.734 --> 00:16:47.491
I don't know if I necessarily wantone request to have it's ID change

327 
00:16:47.492 --> 00:16:48.980
within the request.

328 
00:16:48.981 --> 00:16:52.595
>> Yeah, you're gonna want kindof pointers back to the same HTTP

329 
00:16:52.596 --> 00:16:56.824
request from those various places,whether it's a Razor page, or it's

330 
00:16:56.825 --> 00:17:01.002
a piece of middleware, or if it's inthe middle of that MVC controller.

331 
00:17:01.003 --> 00:17:05.314
>> So we want that to bescoped to the current request.

332 
00:17:05.315 --> 00:17:07.601
>> Yeah.>> So when someone asks for

333 
00:17:07.602 --> 00:17:12.533
one of those, they are gonna getone whose life cycle is set by

334 
00:17:12.534 --> 00:17:17.783
ASP.Net Core in the dependencyinjection system and not by me.

335 
00:17:17.784 --> 00:17:20.792
Again, I never saidnew anywhere here.

336 
00:17:20.793 --> 00:17:23.300
So here's where things get cool.

337 
00:17:23.301 --> 00:17:26.090
Remember before we were insideof ConfigureServices and

338 
00:17:26.091 --> 00:17:30.410
we talked about how that's where weprepare the pipeline and let them

339 
00:17:30.411 --> 00:17:32.400
know about all the differentservices that are available and

340 
00:17:32.401 --> 00:17:34.630
then later on use them.

341 
00:17:34.631 --> 00:17:36.045
Let's go in here and

342 
00:17:36.046 --> 00:17:40.520
say services because this isgonna be a collection of service.

343 
00:17:40.521 --> 00:17:43.076
Like the ability to make RequestIds->> Yep.

344 
00:17:43.077 --> 00:17:46.158
>> Is a service now->> That is available to our

345 
00:17:46.159 --> 00:17:47.775
application, okay.

346 
00:17:47.776 --> 00:17:51.714
And we zoom in on here,and we see AddScoped,

347 
00:17:51.715 --> 00:17:54.732
AddSingleton and AddTransient.

348 
00:17:54.733 --> 00:17:55.288
>> There they are.

349 
00:17:55.289 --> 00:17:56.522
>> Those are the few typesthat you pointed out, right?

350 
00:17:56.523 --> 00:17:58.634
Okay, so what do we got here?

351 
00:17:58.635 --> 00:18:02.962
AddSingleton is 2 orthere's actually several.

352 
00:18:02.963 --> 00:18:04.685
There's 9 different ways to do this.

353 
00:18:04.686 --> 00:18:08.814
And you can pass in Funcs ofFunc and all kind of cool stuff.

354 
00:18:08.815 --> 00:18:09.454
>> Yeah.

355 
00:18:09.455 --> 00:18:14.203
>> I like to keep it a littlesimple because I'm not

356 
00:18:14.204 --> 00:18:19.092
too clever and I'll say,IRequestIdFactory.

357 
00:18:19.093 --> 00:18:21.803
Notice how it's not popping up.

358 
00:18:21.804 --> 00:18:25.480
It's because it's missingmy namespace services.

359 
00:18:25.481 --> 00:18:26.632
>> Uh-huh.

360 
00:18:26.633 --> 00:18:28.986
>> So I can click on that.

361 
00:18:28.987 --> 00:18:31.036
>> Getting some help fromVisual Studio there with the-

362 
00:18:31.037 --> 00:18:32.407
>> Yeah, I can click on

363 
00:18:32.408 --> 00:18:37.261
the little light bulb there, butI like to go and hit Ctrl+.+ Enter.

364 
00:18:37.262 --> 00:18:38.583
>> Yeah.

365 
00:18:38.584 --> 00:18:39.942
And that actually added it.

366 
00:18:39.943 --> 00:18:42.234
And I know it workedbecause it turned color.

367 
00:18:42.235 --> 00:18:45.018
>> Yep, that Ctrl+., is so helpful->> Yeah, it is.

368 
00:18:45.019 --> 00:18:46.024
>> In going through andwriting code.

369 
00:18:46.025 --> 00:18:49.856
>> Ctrl+., and Ctrl+,are the two things I use the most.

370 
00:18:49.857 --> 00:18:53.690
Ctrl+, let's me do quick navigation.

371 
00:18:53.691 --> 00:18:59.171
So if I'm gonna go Ctrl+, and thensay RequestId and then go right to

372 
00:18:59.172 --> 00:19:04.670
where the Ctrl+, ConfigureServicesand we're right back there.

373 
00:19:04.671 --> 00:19:06.608
A real quick way tonavigate those two.

374 
00:19:06.609 --> 00:19:09.600
>> Now then, when you createthat Singleton there with

375 
00:19:09.601 --> 00:19:12.320
the AddSingletonstatement you've defined,

376 
00:19:12.321 --> 00:19:16.128
here's the signature that ifsomebody requests this type you also

377 
00:19:16.129 --> 00:19:18.521
need to specifythe concrete type there.

378 
00:19:18.522 --> 00:19:20.509
>> So this is the thing I want.

379 
00:19:20.510 --> 00:19:24.994
When I need IRequestFactories, who'sthe one that's gonna handle it?

380 
00:19:24.995 --> 00:19:28.894
If we zoom in there it say's,okay, cool what's the service?

381 
00:19:28.895 --> 00:19:29.595
>> Uh-huh.

382 
00:19:29.596 --> 00:19:32.450
>> IRequestFactory the thingthat make's a request.

383 
00:19:32.451 --> 00:19:33.234
>> Yep.

384 
00:19:33.235 --> 00:19:34.550
And what is the implementation?

385 
00:19:34.551 --> 00:19:36.986
As you said the concrete->> Yeah.

386 
00:19:36.987 --> 00:19:37.687
>> Implementation of that.

387 
00:19:37.688 --> 00:19:41.915
Excellent, andthat's a type name, okay?

388 
00:19:41.916 --> 00:19:42.681
>> Mm-hm.

389 
00:19:42.682 --> 00:19:45.162
>> RequestIdFactory,so this says hey,

390 
00:19:45.163 --> 00:19:49.976
ASP.NET Core anytime anybody comesaround asking for RequestIdFactory,

391 
00:19:49.977 --> 00:19:52.318
this will be the onethat handles it.

392 
00:19:52.319 --> 00:19:52.831
>> Yep.>> And

393 
00:19:52.832 --> 00:19:54.645
they don't have tobe named the same.

394 
00:19:54.646 --> 00:19:59.071
They used to be calledSUPERFOOFACTORY it doesn't matter as

395 
00:19:59.072 --> 00:20:03.148
long as it is a thing thatimplements IRequestFactory,

396 
00:20:03.149 --> 00:20:04.030
all right.

397 
00:20:04.031 --> 00:20:10.900
So then, we want to say AddScoped,so RequestID's themselves.

398 
00:20:10.901 --> 00:20:15.070
Don't last too long, butjust the right amount.

399 
00:20:16.880 --> 00:20:20.791
So, those servicesare now in the same

400 
00:20:20.792 --> 00:20:24.670
collection of services that Mvc is.

401 
00:20:24.671 --> 00:20:28.936
>> Now, if we talk about the methodsignatures there on lines 34 and 35.

402 
00:20:28.937 --> 00:20:32.800
You're passing in type names forthose concrete implementations.

403 
00:20:32.801 --> 00:20:33.420
>> Right.

404 
00:20:33.421 --> 00:20:37.906
>> So, when the frameworkgoes to create those,

405 
00:20:37.907 --> 00:20:41.290
the Singleton<RequestIdFactory,it's gonna look for

406 
00:20:41.291 --> 00:20:45.380
a method, a constructor signaturethat it knows how to complete.

407 
00:20:45.381 --> 00:20:50.068
Now our RequestIdFactory,didn't have a constructor that had

408 
00:20:50.069 --> 00:20:54.570
parameters that it needed togo figure out how to create.

409 
00:20:54.571 --> 00:20:56.660
So, it knows how to new that up, so

410 
00:20:56.661 --> 00:20:59.670
when it goes to create thatSingleton, it'll create a new and

411 
00:20:59.671 --> 00:21:02.240
it will stash it with thatsignature that we're using.

412 
00:21:02.241 --> 00:21:05.446
>> I see, so you're saying this isa really easy class for it to make,

413 
00:21:05.447 --> 00:21:07.300
cuz it has itself, no dependencies.

414 
00:21:07.301 --> 00:21:10.950
>> No dependencies, butwhen goes to create the requestID,

415 
00:21:10.951 --> 00:21:15.750
the first time that it's requested,it's gonna request a new requestID.

416 
00:21:15.751 --> 00:21:18.270
And go figure outthose constructors,

417 
00:21:18.271 --> 00:21:23.280
I need an IRequest IDFactory,go resolve, get that Singleton, and

418 
00:21:23.281 --> 00:21:25.910
insert it in, and then passyou the fully instantiated.

419 
00:21:25.911 --> 00:21:29.764
>> So that implies that I need tomake sure that all of the different

420 
00:21:29.765 --> 00:21:33.053
services that I couldpotentially need, are added?

421 
00:21:33.054 --> 00:21:33.749
>> Yes.

422 
00:21:33.750 --> 00:21:37.943
>> And if you do a callback to many,many hours ago when Maria and

423 
00:21:37.944 --> 00:21:40.678
I, were doing our directory browser.

424 
00:21:40.679 --> 00:21:45.230
We saw where we said use directorybrowser, and then it said,

425 
00:21:45.231 --> 00:21:49.180
I was trying to make a directorybrowser, but I came upon this thing

426 
00:21:49.181 --> 00:21:53.590
downstream somewhere calledHTML formatter, I got stuck.

427 
00:21:53.591 --> 00:21:57.800
That needed to be inthat service collection.

428 
00:21:57.801 --> 00:21:59.502
And in fact, we could probablyput a breakpoint there,

429 
00:21:59.503 --> 00:22:00.589
and look at the collection as well,

430 
00:22:00.590 --> 00:22:02.051
if we want to see allthe different things in it.

431 
00:22:02.052 --> 00:22:05.942
>> So, quick for the viewers, thatpop-up window that you showed us

432 
00:22:05.943 --> 00:22:08.592
there, what's the hotkey to bring that up?

433 
00:22:08.593 --> 00:22:12.779
>> That is Alt+F12, so I liketo go and say, go to definition,

434 
00:22:12.780 --> 00:22:14.940
this is peak definition.

435 
00:22:14.941 --> 00:22:18.657
So I'm in this tab, andI'm looking at a RequestID, and

436 
00:22:18.658 --> 00:22:22.900
I'm thinking about RequestIDs,I can go and say, Peak.

437 
00:22:22.901 --> 00:22:23.500
>> There it is.

438 
00:22:23.501 --> 00:22:25.050
>> AndI get a window within a window.

439 
00:22:25.051 --> 00:22:28.900
And what's cool about that is thatit's real, I can look around there.

440 
00:22:28.901 --> 00:22:33.043
So, this is a really nice way forus to see, that RequestIds need

441 
00:22:33.044 --> 00:22:37.850
RequestIdFactories, andhow that chain of dependency works.

442 
00:22:37.851 --> 00:22:38.600
>> There you go.

443 
00:22:38.601 --> 00:22:41.130
>> Good observation anda good thing to point out.

444 
00:22:41.131 --> 00:22:44.330
All right, so that's interesting.

445 
00:22:44.331 --> 00:22:47.390
Those are just two POCO's,

446 
00:22:47.391 --> 00:22:50.680
or Plain Old CLR objects thatare out there in the world.

447 
00:22:50.681 --> 00:22:52.930
We don't actually have, anymiddleware to do anything with them.

448 
00:22:52.931 --> 00:22:55.510
>> Right, they're just livingout there, nobody is creating or

449 
00:22:55.511 --> 00:22:56.370
requesting them yet.

450 
00:22:56.371 --> 00:22:57.150
>> That's a good point.

451 
00:22:57.151 --> 00:23:00.060
Even though we have added itto the services collection,

452 
00:23:00.061 --> 00:23:02.480
it's not gonna ever be madecuz no one ever needed one.

453 
00:23:02.481 --> 00:23:04.740
>> No, nobody is instantiating it.

454 
00:23:04.741 --> 00:23:05.630
>> So let's go over here.

455 
00:23:05.631 --> 00:23:08.310
And these folders reallyare just convention,

456 
00:23:08.311 --> 00:23:10.370
it's up to you how youwanna name your folders.

457 
00:23:10.371 --> 00:23:16.070
But having one for services is nice,as is having one for middleware.

458 
00:23:16.071 --> 00:23:16.900
>> Yeah.

459 
00:23:16.901 --> 00:23:19.610
>> So middleware, this is gonnabe like your custom middleware.

460 
00:23:19.611 --> 00:23:22.007
And it's gonna sit in the pipelineand it's gonna do stuff,

461 
00:23:22.008 --> 00:23:23.749
it's gonna use thesedifferent services.

462 
00:23:23.750 --> 00:23:28.496
So I'm gonna say, Add > Class and

463 
00:23:28.497 --> 00:23:33.754
we'll make a RequestIdMiddleware.

464 
00:23:33.755 --> 00:23:40.670
In this RequestIdMiddleware,is gonna have a constructor,

465 
00:23:40.671 --> 00:23:44.660
that is going to be just like yours.

466 
00:23:44.661 --> 00:23:47.440
When we make some middleware you'regonna need to have a few things

467 
00:23:47.441 --> 00:23:48.570
passed in.

468 
00:23:48.571 --> 00:23:56.690
First there is a RequestDelegate.

469 
00:23:56.691 --> 00:24:02.410
That all comes out of HTTP namespace inside of ASP.NET Core.

470 
00:24:02.411 --> 00:24:03.550
So you need the next one.

471 
00:24:05.130 --> 00:24:12.100
Now, we want a new RequestId Inour middleware cuz we are doing

472 
00:24:12.101 --> 00:24:17.090
stuff with RequestId's, so we'regonna need that name space as well.

473 
00:24:17.091 --> 00:24:21.840
>> I think it's capital D andthere we go.

474 
00:24:21.841 --> 00:24:24.217
>> Fixed it and out of it usingat the same time, cuz I'm fancy.

475 
00:24:24.218 --> 00:24:25.340
>> Nice.

476 
00:24:25.341 --> 00:24:25.840
>> Yes.

477 
00:24:27.180 --> 00:24:30.440
Then, let's have a logger as well,cuz right now we have all

478 
00:24:30.441 --> 00:24:35.430
these things available to us, whynot have it log things, that's cool.

479 
00:24:35.431 --> 00:24:38.235
And we'll say, we'll needan ILogger that knows about

480 
00:24:38.236 --> 00:24:42.300
RequestIdMiddlewares, we'llname it logger.

481 
00:24:42.301 --> 00:24:47.212
So, we're able to start this classup, and we've already go whole

482 
00:24:47.213 --> 00:24:50.810
bunch of stuff, available to us andwe didn't have to new anything.

483 
00:24:50.811 --> 00:24:51.600
>> No, we didn't.

484 
00:24:51.601 --> 00:24:55.590
It's just gonna be passed in, andcreated as needed with the scopes

485 
00:24:55.591 --> 00:24:59.970
that are defined, inside thatconfigure services method.

486 
00:24:59.971 --> 00:25:00.604
>> Exactly.

487 
00:25:00.605 --> 00:25:04.954
So, because our invoke isgoing to need hang on to next,

488 
00:25:04.955 --> 00:25:09.583
to the next bit of middleware,we'll just take a moment and

489 
00:25:09.584 --> 00:25:12.839
we will squirrel awaythe next delegate.

490 
00:25:12.840 --> 00:25:17.260
That's gonna hang on to whatcomes next in the pipeline.

491 
00:25:17.261 --> 00:25:19.660
And then, we're gonna go andtake our logger and

492 
00:25:19.661 --> 00:25:24.040
since we got one passed in,we're gonna want to hang on to it,

493 
00:25:25.280 --> 00:25:28.260
so we can use it forthe life of our object.

494 
00:25:28.261 --> 00:25:31.020
And that is gonna beRequestIdMiddleware, and

495 
00:25:31.021 --> 00:25:32.760
that one was called _logger.

496 
00:25:32.761 --> 00:25:37.728
And what we're gonna do is,in this next is passed to and

497 
00:25:37.729 --> 00:25:43.983
logger is passed there it's _next= next, and _logger = logger.

498 
00:25:46.007 --> 00:25:48.380
I think there's ways to makethat a little cleaner, but for

499 
00:25:48.381 --> 00:25:49.600
now I think that will be fine.

500 
00:25:49.601 --> 00:25:50.100
>> Yeah.

501 
00:25:51.100 --> 00:25:53.760
>> Then, remember whata middleware has to have.

502 
00:25:53.761 --> 00:25:55.385
>> Has to have that invoke method,Scott?

503 
00:25:55.386 --> 00:25:57.625
>> Mm-hm, that is the onething it has to have,

504 
00:25:57.626 --> 00:26:00.320
it's almost an interfacewithout an interface.

505 
00:26:00.321 --> 00:26:02.250
>> It is.>> It's an agreement,

506 
00:26:02.251 --> 00:26:05.320
that they know how to be invoked,and as you pointed out

507 
00:26:05.321 --> 00:26:08.780
in the middleware section,I get passed in the HttpContext.

508 
00:26:08.781 --> 00:26:13.311
And we're gonna alsohave it get a IRequestID.

509 
00:26:16.557 --> 00:26:18.784
So, painful to watch someoneelse type, isn't it, Jeff?

510 
00:26:20.321 --> 00:26:22.050
You're being very kind.

511 
00:26:22.051 --> 00:26:23.308
>> I am, yeah.

512 
00:26:23.309 --> 00:26:25.870
>> [LAUGH]>> Somebody once said,

513 
00:26:25.871 --> 00:26:28.060
this is what it's likewatching your manager type.

514 
00:26:28.061 --> 00:26:29.272
>> That's so painful.

515 
00:26:29.273 --> 00:26:32.720
You know, I type a 100 wordsa minute, but 90 of it is errors.

516 
00:26:32.721 --> 00:26:34.350
Yeah, it's mostly backspace.

517 
00:26:34.351 --> 00:26:36.707
>> I IntelliSense 90 words a minute.

518 
00:26:36.708 --> 00:26:39.279
>> Actually, that's a good point,IntelliSense should count towards

519 
00:26:39.280 --> 00:26:41.260
your ultimate typing speed,but it doesn't.

520 
00:26:41.261 --> 00:26:42.690
>> It doesn't.

521 
00:26:42.691 --> 00:26:44.820
>> So, we're gonna go andsay logger,

522 
00:26:44.821 --> 00:26:48.060
and we talked about this duringdiagnostics and logging section.

523 
00:26:49.310 --> 00:26:51.710
>> Yeah, look at those log methods.

524 
00:26:51.711 --> 00:26:52.290
>> Exactly, and

525 
00:26:52.291 --> 00:26:56.520
this is gonna follow, we saw howwe can configure your logging and

526 
00:26:56.521 --> 00:27:00.850
say, only shown me critical, oronly shown me warnings and above.

527 
00:27:00.851 --> 00:27:01.580
We're gonna say,

528 
00:27:01.581 --> 00:27:04.868
go in the logInformation, this iskind of an informational thing.

529 
00:27:04.869 --> 00:27:07.580
And then we're gonna used ourfavorite thing in the world,

530 
00:27:07.581 --> 00:27:09.800
which is the string interpolation.

531 
00:27:09.801 --> 00:27:14.280
We'll say, this is Request andthen we'll say requestId,

532 
00:27:14.281 --> 00:27:18.350
I love getting IntelliSenseinside of a C# string.

533 
00:27:18.351 --> 00:27:19.520
It still seems impossible.

534 
00:27:20.880 --> 00:27:21.690
>> This feature has

535 
00:27:21.691 --> 00:27:23.770
completely changed the wayI type strings in C#.

536 
00:27:23.771 --> 00:27:25.190
>> Yeah, it's good.

537 
00:27:25.191 --> 00:27:28.590
So, there we go,request right now is executing.

538 
00:27:30.190 --> 00:27:33.150
This one's squigglingbecause it feels like

539 
00:27:33.151 --> 00:27:34.340
something is not happening.

540 
00:27:34.341 --> 00:27:35.980
We never->> We have returned anything.

541 
00:27:35.981 --> 00:27:37.501
>> [CROSSTALK] the next, exactly.

542 
00:27:37.502 --> 00:27:41.320
So we'll say, _next andwe'll pass our context.

543 
00:27:41.321 --> 00:27:45.170
So, all we're gonna doin this thing is Invoke.

544 
00:27:45.171 --> 00:27:47.220
But you know what I'm realizing?

545 
00:27:47.221 --> 00:27:51.300
Once again, we went an entireclass without newing anything.

546 
00:27:51.301 --> 00:27:52.340
>> Yup.

547 
00:27:52.341 --> 00:27:55.969
>> We simply said,we need a requestId.

548 
00:27:55.970 --> 00:27:57.710
And here's anotherinteresting thing.

549 
00:27:58.930 --> 00:28:01.740
I don't see anything abouta RequestFactory here.

550 
00:28:03.130 --> 00:28:04.120
>> Right.

551 
00:28:04.121 --> 00:28:07.040
>> Yeah, we didn't even haveto worry about that, did we?

552 
00:28:07.041 --> 00:28:10.990
Because the RequestIdFactory,was the thing that handled that.

553 
00:28:10.991 --> 00:28:14.610
So, we have a little bit ofa single responsibility principle.

554 
00:28:14.611 --> 00:28:15.280
>> Yup.

555 
00:28:15.281 --> 00:28:20.590
>> And notice also, we asked fora RequestID right here.

556 
00:28:20.591 --> 00:28:22.909
But we never madea RequestIdFactory,

557 
00:28:22.910 --> 00:28:24.360
that gets made for us.

558 
00:28:24.361 --> 00:28:25.230
>> Exactly.

559 
00:28:25.231 --> 00:28:27.760
>> So, no one that we know of, or

560 
00:28:27.761 --> 00:28:32.720
see, makes a RequestIdFactory orvisibly calls make RequestID.

561 
00:28:32.721 --> 00:28:34.720
It's all being hidden from us.

562 
00:28:34.721 --> 00:28:37.065
>> It's middleware forthe middlewarer.

563 
00:28:38.230 --> 00:28:40.840
>> We did actually some middlewareservices, for our middleware,

564 
00:28:40.841 --> 00:28:41.600
that's a good point.

565 
00:28:41.601 --> 00:28:44.120
So, there's a couple ofthings that we can do here.

566 
00:28:44.121 --> 00:28:46.700
We can go andadd this RequestIdMiddleware,

567 
00:28:46.701 --> 00:28:50.820
remember our name space thatit's in, by going into startup.

568 
00:28:52.330 --> 00:28:56.300
And we've got our list ofkinda existing middleware,

569 
00:28:56.301 --> 00:28:59.230
I think that that probablyseems like a good spot.

570 
00:28:59.231 --> 00:28:59.850
>> Yeah.

571 
00:28:59.851 --> 00:29:01.860
>> You did a thing that was cool.

572 
00:29:01.861 --> 00:29:06.150
You said Use, andyou had Jeffs awesome middleware or

573 
00:29:06.151 --> 00:29:08.200
whatever, you had a use method.

574 
00:29:08.201 --> 00:29:10.490
>> You coulda just stopped at useJeffs awesome, that's pretty.

575 
00:29:10.491 --> 00:29:12.550
>> Sure, sohere what I'm gonna do is,

576 
00:29:12.551 --> 00:29:15.820
I'm gonna use a more generic one soI don't write that sugar.

577 
00:29:15.821 --> 00:29:17.010
>> Sure.>> I would say UseMiddleware,

578 
00:29:17.011 --> 00:29:20.920
and then I'm gonna sayRequestIdMIddleware.

579 
00:29:22.090 --> 00:29:24.480
And you see,it's not able to find that.

580 
00:29:26.300 --> 00:29:29.440
Because it's inthe middleware namespace.

581 
00:29:29.441 --> 00:29:31.863
It went and fixed my spelling erroras well, which is pretty cool.

582 
00:29:34.985 --> 00:29:38.470
So I could go andmake a helper function.

583 
00:29:39.580 --> 00:29:42.020
UseRequestIdMiddleware.

584 
00:29:42.021 --> 00:29:42.890
>> Sure could, yeah.

585 
00:29:42.891 --> 00:29:43.740
>> Which is cool.

586 
00:29:43.741 --> 00:29:45.390
>> Yeah.>> It gives you IntelliSense and

587 
00:29:45.391 --> 00:29:45.930
it's friendly.

588 
00:29:46.990 --> 00:29:50.010
But if I don't wanna do that Idon't have to do that, I can go and

589 
00:29:50.011 --> 00:29:50.854
just do it like this.

590 
00:29:50.855 --> 00:29:54.660
But I wanna make that littlebit of sugar that you sent.

591 
00:29:56.130 --> 00:29:57.449
So I think that looks good.

592 
00:29:57.450 --> 00:30:00.766
Let's go andmake sure that we're running this.

593 
00:30:00.767 --> 00:30:04.356
I'm gonna do it under Kestrel,cuz I'd like to see my messages at

594 
00:30:04.357 --> 00:30:06.919
the At the command prompt there,the DOS box.

595 
00:30:06.920 --> 00:30:08.875
And we'll run this application andcheck it out.

596 
00:30:10.876 --> 00:30:12.266
>> Do we still call it the DOS box,or

597 
00:30:12.267 --> 00:30:13.716
do we now call it the shell window?

598 
00:30:13.717 --> 00:30:15.356
>> It's a command prompt.

599 
00:30:15.357 --> 00:30:18.301
I mean there's PowerShell,there's Bash,

600 
00:30:18.302 --> 00:30:22.470
there's, I made it green tomake it look like an Apple II.

601 
00:30:22.471 --> 00:30:24.680
So, you know,ultimately I can't win.

602 
00:30:24.681 --> 00:30:26.280
>> Reminds me of a 3270.

603 
00:30:26.281 --> 00:30:28.560
>> It's good,that just means that you're old.

604 
00:30:28.561 --> 00:30:32.210
So check this out, look.

605 
00:30:32.211 --> 00:30:37.360
Request 2, request 3,we can actually go in and

606 
00:30:37.361 --> 00:30:40.920
see how many requests get called.

607 
00:30:40.921 --> 00:30:42.311
>> So, why don't we try this?

608 
00:30:42.312 --> 00:30:42.971
>> Okay, what do you got?

609 
00:30:42.972 --> 00:30:47.071
>> So we put in that this isset on a scoped request, right?

610 
00:30:47.072 --> 00:30:47.771
>> Mm-hm.

611 
00:30:47.772 --> 00:30:50.874
>> Why don't weinject the request ID

612 
00:30:50.875 --> 00:30:54.731
into the view thatyou're showing there?

613 
00:30:54.732 --> 00:30:55.267
>> All right.

614 
00:30:55.268 --> 00:30:56.372
>> Wait, that's not a view, is it?

615 
00:30:56.373 --> 00:30:57.192
>> No, it is.

616 
00:30:57.193 --> 00:30:59.012
>> Okay, why don't youinject it into the view.

617 
00:30:59.013 --> 00:31:00.692
>> Why don't you showme how to do that?

618 
00:31:00.693 --> 00:31:06.796
>> Okay, sowhat we do is we add a new directive

619 
00:31:06.797 --> 00:31:12.060
there after Model, it is @Inject.

620 
00:31:12.061 --> 00:31:14.040
Lower case, and then space.

621 
00:31:14.041 --> 00:31:16.848
And then it almost follows thesyntax as though we were declaring

622 
00:31:16.849 --> 00:31:17.420
a variable.

623 
00:31:17.421 --> 00:31:19.420
So you specify the typethat you're looking for.

624 
00:31:19.421 --> 00:31:22.340
>> The type in thiscase was a request ID.

625 
00:31:22.341 --> 00:31:23.900
>> You're looking for an IRequestID.

626 
00:31:27.620 --> 00:31:31.920
>> And I think it was inWebApplication22.Middleware.

627 
00:31:35.290 --> 00:31:36.100
Is it in middleware?

628 
00:31:36.101 --> 00:31:37.152
>> Well, you're right.

629 
00:31:37.153 --> 00:31:37.772
>> It's in Services.

630 
00:31:37.773 --> 00:31:39.252
>> It's in Services, thank you.

631 
00:31:39.253 --> 00:31:42.532
It is in Services, all right.

632 
00:31:42.533 --> 00:31:45.086
>> And then after that, you need tospecify the name of the variable

633 
00:31:45.087 --> 00:31:46.472
that you're gonna be receiving.

634 
00:31:46.473 --> 00:31:47.692
>> Let's say just req.

635 
00:31:47.693 --> 00:31:48.312
>> Sure.

636 
00:31:48.313 --> 00:31:48.912
>> Okay.

637 
00:31:48.913 --> 00:31:51.773
>> So now let's output that req IDa little bit further down there.

638 
00:31:55.233 --> 00:31:58.953
So @req.

639 
00:31:58.954 --> 00:32:00.653
>> It can't be that easy.

640 
00:32:00.654 --> 00:32:03.160
>> Isn't there a propertyon there we need to?

641 
00:32:03.161 --> 00:32:04.620
>> Yep, .Id.

642 
00:32:04.621 --> 00:32:05.400
>> There we go.

643 
00:32:05.401 --> 00:32:07.140
>> But still, it can't be that easy.

644 
00:32:07.141 --> 00:32:09.403
>> It can't be, but it is.

645 
00:32:09.404 --> 00:32:10.263
>> Are you sure?

646 
00:32:10.264 --> 00:32:11.563
You're freaking me out now.

647 
00:32:11.564 --> 00:32:12.220
Let's find out.

648 
00:32:13.610 --> 00:32:14.645
>> It's like we planned this.

649 
00:32:14.646 --> 00:32:17.950
>> [LAUGH] It's almost likethere's a script, Jeff.

650 
00:32:19.350 --> 00:32:20.050
>> Request ID 2.

651 
00:32:20.051 --> 00:32:22.380
>> The irony, of course,is that there's no script.

652 
00:32:22.381 --> 00:32:26.183
>> Now, so you're seeing request ID.

653 
00:32:26.184 --> 00:32:28.650
>> Did you notice one,did you notice something funny?

654 
00:32:28.651 --> 00:32:29.820
Let's do that again.

655 
00:32:29.821 --> 00:32:31.660
People might be wondering,cuz it skipped a number.

656 
00:32:32.660 --> 00:32:33.953
>> It did.>> You know why?

657 
00:32:33.954 --> 00:32:38.533
Look, there's 2 and there's 3.

658 
00:32:38.534 --> 00:32:39.393
>> Yeah.

659 
00:32:39.394 --> 00:32:40.313
>> Yeah, yeah, yeah.

660 
00:32:42.994 --> 00:32:47.780
>> Is it requesting, no,favicon.ico is in there.

661 
00:32:47.781 --> 00:32:48.590
See it requesting?

662 
00:32:48.591 --> 00:32:49.920
>> Where is that, show me.

663 
00:32:49.921 --> 00:32:52.750
>> Third line from the bottominside that, there it is.

664 
00:32:52.751 --> 00:32:54.400
>> Yep, see that.>> Request starting.

665 
00:32:54.401 --> 00:32:55.890
>> The favorite icon,

666 
00:32:55.891 --> 00:32:59.900
the favico, that's the littleicon that goes up there.

667 
00:32:59.901 --> 00:33:00.510
>> Yup.

668 
00:33:00.511 --> 00:33:01.700
>> That is a request.

669 
00:33:01.701 --> 00:33:04.260
And because, this is really,really important to remember,

670 
00:33:04.261 --> 00:33:08.800
because middleware is as mucha handler as is a module,

671 
00:33:08.801 --> 00:33:10.110
it's listening to everything.

672 
00:33:10.111 --> 00:33:11.550
>> Every request for every file.

673 
00:33:11.551 --> 00:33:15.030
>> So I would need to change that tosay, well, I only care about pages,

674 
00:33:15.031 --> 00:33:17.083
or I only care about images orwhatever.

675 
00:33:17.084 --> 00:33:19.203
It's up to us.

676 
00:33:19.204 --> 00:33:22.232
>> So you could change wherethat middleware is called so

677 
00:33:22.233 --> 00:33:25.470
that it occurs aftertransmitting those static files.

678 
00:33:25.471 --> 00:33:27.640
And then it won't affect,

679 
00:33:27.641 --> 00:33:31.220
it won't trigger when those staticfiles are being transmitted.

680 
00:33:31.221 --> 00:33:31.910
>> Exactly.

681 
00:33:31.911 --> 00:33:35.160
Right here I'm justholding down Ctrl+R.

682 
00:33:35.161 --> 00:33:37.510
This is my poor man's load test.

683 
00:33:37.511 --> 00:33:38.024
>> There you go.

684 
00:33:38.025 --> 00:33:40.843
>> But it's an interesting point,though, because it

685 
00:33:40.844 --> 00:33:44.353
does also bring up that issue ofthe original reason that we went and

686 
00:33:44.354 --> 00:33:45.606
did this the way we did,

687 
00:33:45.607 --> 00:33:49.264
is that you might very well havepeople doing stuff simultaneously.

688 
00:33:49.265 --> 00:33:52.310
And you need to make sure that youdon't have any threading issues.

689 
00:33:52.311 --> 00:33:57.575
So we did a very, very simplebit of business there to go and

690 
00:33:57.576 --> 00:34:01.987
say Interlocked.Increment andgo and Id++.

691 
00:34:01.988 --> 00:34:03.027
>> Yep.

692 
00:34:03.028 --> 00:34:05.502
>> On that particular item,all right.

693 
00:34:05.503 --> 00:34:11.102
So that is, I think, a pretty visualway to look at dependency injection.

694 
00:34:11.103 --> 00:34:14.408
I think the only thing thatwasn't discussed there would have

695 
00:34:14.409 --> 00:34:15.370
been transient.

696 
00:34:16.400 --> 00:34:17.610
Here's a question.

697 
00:34:17.611 --> 00:34:22.460
Could we, for lack of a better word,break this or

698 
00:34:22.461 --> 00:34:26.810
do it wrong if we changed the waywe registered these services?

699 
00:34:26.811 --> 00:34:27.510
>> Absolutely.

700 
00:34:27.511 --> 00:34:28.930
Why don't we do that real quick?

701 
00:34:28.931 --> 00:34:32.680
So when you addedthe RequestFactory as a singleton,

702 
00:34:32.681 --> 00:34:35.526
let's change thatto an AddTransient.

703 
00:34:35.527 --> 00:34:37.346
>> That's probablygonna break something.

704 
00:34:37.347 --> 00:34:40.140
AddTransient, sowhat is it transient?

705 
00:34:40.141 --> 00:34:42.830
It doesn't?>> So transient says every time that

706 
00:34:42.831 --> 00:34:46.410
one of these is requested,I'm going to create a new instance.

707 
00:34:46.411 --> 00:34:48.480
>> Okay, soa new instance of the factory.

708 
00:34:48.481 --> 00:34:49.750
>> A new instance of the factory.

709 
00:34:49.751 --> 00:34:52.112
>> Okay.>> So we haven't actually changed,

710 
00:34:52.113 --> 00:34:53.382
this is important,

711 
00:34:53.383 --> 00:34:57.726
we haven't actually changed theimplementation of the request ID.

712 
00:34:57.727 --> 00:35:02.366
We didn't change any of the requestID or request factory related code.

713 
00:35:02.367 --> 00:35:03.446
>> Correct, right.

714 
00:35:03.447 --> 00:35:07.092
But now, take a look at our log andour output HTML.

715 
00:35:07.093 --> 00:35:09.220
>> Look at that.

716 
00:35:09.221 --> 00:35:10.700
Everything is request 1.

717 
00:35:10.701 --> 00:35:14.030
>> Right, because each timethat it requests the factory,

718 
00:35:14.031 --> 00:35:17.000
it's getting a brand newinstance of the factory.

719 
00:35:17.001 --> 00:35:18.140
>> Interesting, okay.

720 
00:35:18.141 --> 00:35:22.650
So what if we change the factoryfrom transient to scoped?

721 
00:35:22.651 --> 00:35:25.814
So at least it wouldbe same per request.

722 
00:35:25.815 --> 00:35:27.775
[CROSSTALK] Butevery request would get their own.

723 
00:35:27.776 --> 00:35:28.834
>> Right.

724 
00:35:32.334 --> 00:35:33.494
[CROSSTALK] the same thing.

725 
00:35:33.495 --> 00:35:34.934
>> Right.

726 
00:35:34.935 --> 00:35:39.709
So if you were requesting thatmiddleware several different times

727 
00:35:39.710 --> 00:35:45.415
within the scope of that controller,you might see that number increment.

728 
00:35:45.416 --> 00:35:47.388
>> I see.So if we put it in multiple places,

729 
00:35:47.389 --> 00:35:50.294
in subviews and differentlocations within our application,

730 
00:35:50.295 --> 00:35:52.515
at least the numberwould remain the same.

731 
00:35:52.516 --> 00:35:53.195
>> Yep.>> But because

732 
00:35:53.196 --> 00:35:55.675
the factory is not a singleton,it would always be 1.

733 
00:35:55.676 --> 00:35:56.285
>> Yep.

734 
00:35:56.286 --> 00:35:57.255
>> All right.

735 
00:35:57.256 --> 00:36:01.325
So scoping is so important andsuch a fundamental aspect of this.

736 
00:36:01.326 --> 00:36:01.985
>> It is.

737 
00:36:01.986 --> 00:36:06.017
>> It's also worth pointing out thatwhile dependency injection is kind

738 
00:36:06.018 --> 00:36:07.724
of baked into ASP.NET Core,

739 
00:36:07.725 --> 00:36:10.537
you don't have to doanything to make it happen.

740 
00:36:10.538 --> 00:36:11.517
You don't have to turn anything on.

741 
00:36:11.518 --> 00:36:13.200
It's there by default.

742 
00:36:13.201 --> 00:36:15.690
>> You don't have to useit if you don't want to.

743 
00:36:15.691 --> 00:36:16.960
>> Exactly.

744 
00:36:16.961 --> 00:36:18.247
You could new thingsup all you wanted.

745 
00:36:18.248 --> 00:36:18.827
>> Absolutely.

746 
00:36:18.828 --> 00:36:19.928
>> But eventually,it'll probably hurt.

747 
00:36:19.929 --> 00:36:23.448
>> Yeah, it's a good developmentpractice to use this.

748 
00:36:23.449 --> 00:36:26.629
>> But it's important to note alsothat there are great third-party

749 
00:36:26.630 --> 00:36:28.688
dependency injectionsystems out there.

750 
00:36:28.689 --> 00:36:29.408
>> Yes.

751 
00:36:29.409 --> 00:36:32.882
>> You can check out Autofac,there's different injections,

752 
00:36:32.883 --> 00:36:35.325
so if you like this style,that's great.

753 
00:36:35.326 --> 00:36:37.510
But if you have a preference foranother system,

754 
00:36:37.511 --> 00:36:38.270
like a third party one,

755 
00:36:38.271 --> 00:36:42.220
like I use Autofac as an example,be sure to explore those as well.

756 
00:36:42.221 --> 00:36:45.560
Cuz some people like to declarethese things in different ways.

757 
00:36:45.561 --> 00:36:46.520
>> Absolutely.

758 
00:36:46.521 --> 00:36:50.610
And you pointed out that it isused throughout the framework.

759 
00:36:50.611 --> 00:36:55.440
Every class that the frameworkcreates is eligible to be connected

760 
00:36:55.441 --> 00:36:59.800
to with dependency injection, setup the constructor parameters, and

761 
00:36:59.801 --> 00:37:02.510
those will be passed into,as well as the views.

762 
00:37:02.511 --> 00:37:06.170
The views, that's really the newone that we never really had before

763 
00:37:06.171 --> 00:37:08.310
in older versions of ASP.NET.

764 
00:37:08.311 --> 00:37:10.620
Injecting things into the views,

765 
00:37:10.621 --> 00:37:15.200
while cool, might not beapplicable in every scenario.

766 
00:37:15.201 --> 00:37:17.130
It might be better topass them as models.

767 
00:37:17.131 --> 00:37:20.830
>> All right, so that is a generalsense of a dependency injection and

768 
00:37:20.831 --> 00:37:22.180
how it works on ASP.NET Core.

769 
00:37:22.181 --> 00:37:25.540
We'll take a short break and we'llcome back and talk about web APIs.

770 
00:37:25.541 --> 00:37:26.110
>> Fantastic.

